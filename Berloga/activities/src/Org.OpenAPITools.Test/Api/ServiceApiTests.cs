/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ServiceApiTests : IDisposable
    {
        private ServiceApi instance;

        public ServiceApiTests()
        {
            instance = new ServiceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ServiceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ServiceApi
            //Assert.IsType<ServiceApi>(instance);
        }

        /// <summary>
        /// Test ActivitiesMetricsList
        /// </summary>
        [Fact]
        public void ActivitiesMetricsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //Guid? applicationId = null;
            //List<string>? contextProperty = null;
            //List<Guid>? contextIds = null;
            //DateTime? since = null;
            //DateTime? until = null;
            //List<Guid>? playerIds = null;
            //var response = instance.ActivitiesMetricsList(offset, limit, applicationId, contextProperty, contextIds, since, until, playerIds);
            //Assert.IsType<List<ActivitiesMetricsList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test ActivitiesScores
        /// </summary>
        [Fact]
        public void ActivitiesScoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? traditionId = null;
            //List<Guid>? contextIds = null;
            //List<Guid>? playerIds = null;
            //var response = instance.ActivitiesScores(traditionId, contextIds, playerIds);
            //Assert.IsType<decimal>(response);
        }

        /// <summary>
        /// Test ActivitiesScoresByTraditions
        /// </summary>
        [Fact]
        public void ActivitiesScoresByTraditionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int talentId = null;
            //var response = instance.ActivitiesScoresByTraditions(talentId);
            //Assert.IsType<List<ActivitiesScoresByTraditions200ResponseInner>>(response);
        }

        /// <summary>
        /// Test ActivityRead
        /// </summary>
        [Fact]
        public void ActivityReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid activityId = null;
            //var response = instance.ActivityRead(activityId);
            //Assert.IsType<ActivityRead200Response>(response);
        }

        /// <summary>
        /// Test ContextTraditionID
        /// </summary>
        [Fact]
        public void ContextTraditionIDTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid contextId = null;
            //var response = instance.ContextTraditionID(contextId);
            //Assert.IsType<int>(response);
        }
    }
}
