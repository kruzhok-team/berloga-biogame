/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationApiTests : IDisposable
    {
        private ApplicationApi instance;

        public ApplicationApiTests()
        {
            instance = new ApplicationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationApi
            //Assert.IsType<ApplicationApi>(instance);
        }

        /// <summary>
        /// Test ActivitiesCreate
        /// </summary>
        [Fact]
        public void ActivitiesCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActivitiesCreateRequest activitiesCreateRequest = null;
            //var response = instance.ActivitiesCreate(activitiesCreateRequest);
            //Assert.IsType<ActivitiesCreate201Response>(response);
        }

        /// <summary>
        /// Test ActivitiesList
        /// </summary>
        [Fact]
        public void ActivitiesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<Guid> ids = null;
            //var response = instance.ActivitiesList(ids);
            //Assert.IsType<List<Activity>>(response);
        }

        /// <summary>
        /// Test ActivitiesScores
        /// </summary>
        [Fact]
        public void ActivitiesScoresTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? traditionId = null;
            //List<Guid>? contextIds = null;
            //List<Guid>? playerIds = null;
            //var response = instance.ActivitiesScores(traditionId, contextIds, playerIds);
            //Assert.IsType<decimal>(response);
        }

        /// <summary>
        /// Test ArtefactSetUploaded
        /// </summary>
        [Fact]
        public void ArtefactSetUploadedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid artefactId = null;
            //instance.ArtefactSetUploaded(artefactId);
        }

        /// <summary>
        /// Test ArtefactTypesList
        /// </summary>
        [Fact]
        public void ArtefactTypesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ArtefactTypesList();
            //Assert.IsType<List<ArtefactTypesList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test ArtefactUploadURL
        /// </summary>
        [Fact]
        public void ArtefactUploadURLTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid artefactId = null;
            //var response = instance.ArtefactUploadURL(artefactId);
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ArtefactsCreate
        /// </summary>
        [Fact]
        public void ArtefactsCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int xArtefactType = null;
            //string xChecksum = null;
            //System.IO.Stream body = null;
            //var response = instance.ArtefactsCreate(xArtefactType, xChecksum, body);
            //Assert.IsType<Guid>(response);
        }
    }
}
