/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Запись активностей
        /// </summary>
        /// <remarks>
        /// Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivitiesCreate201Response</returns>
        ActivitiesCreate201Response ActivitiesCreate(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Запись активностей
        /// </summary>
        /// <remarks>
        /// Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivitiesCreate201Response</returns>
        ApiResponse<ActivitiesCreate201Response> ActivitiesCreateWithHttpInfo(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Список активностей
        /// </summary>
        /// <remarks>
        /// Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Activity&gt;</returns>
        List<Activity> ActivitiesList(List<Guid> ids, int operationIndex = 0);

        /// <summary>
        /// Список активностей
        /// </summary>
        /// <remarks>
        /// Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        ApiResponse<List<Activity>> ActivitiesListWithHttpInfo(List<Guid> ids, int operationIndex = 0);
        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        decimal ActivitiesScores(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);

        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> ActivitiesScoresWithHttpInfo(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);
        /// <summary>
        /// Подтверждение загрузки артефакта
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ArtefactSetUploaded(Guid artefactId, int operationIndex = 0);

        /// <summary>
        /// Подтверждение загрузки артефакта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArtefactSetUploadedWithHttpInfo(Guid artefactId, int operationIndex = 0);
        /// <summary>
        /// Справочник типов артефактов
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        List<ArtefactTypesList200ResponseInner> ArtefactTypesList(int operationIndex = 0);

        /// <summary>
        /// Справочник типов артефактов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        ApiResponse<List<ArtefactTypesList200ResponseInner>> ArtefactTypesListWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Запрос новой ссылки для загрузки
        /// </summary>
        /// <remarks>
        /// Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ArtefactUploadURL(Guid artefactId, int operationIndex = 0);

        /// <summary>
        /// Запрос новой ссылки для загрузки
        /// </summary>
        /// <remarks>
        /// Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ArtefactUploadURLWithHttpInfo(Guid artefactId, int operationIndex = 0);
        /// <summary>
        /// Загрузка артефакта
        /// </summary>
        /// <remarks>
        /// Артефакт предварительно загружается для передачи его в активности.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        Guid ArtefactsCreate(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0);

        /// <summary>
        /// Загрузка артефакта
        /// </summary>
        /// <remarks>
        /// Артефакт предварительно загружается для передачи его в активности.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> ArtefactsCreateWithHttpInfo(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Запись активностей
        /// </summary>
        /// <remarks>
        /// Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivitiesCreate201Response</returns>
        System.Threading.Tasks.Task<ActivitiesCreate201Response> ActivitiesCreateAsync(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Запись активностей
        /// </summary>
        /// <remarks>
        /// Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivitiesCreate201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivitiesCreate201Response>> ActivitiesCreateWithHttpInfoAsync(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список активностей
        /// </summary>
        /// <remarks>
        /// Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        System.Threading.Tasks.Task<List<Activity>> ActivitiesListAsync(List<Guid> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список активностей
        /// </summary>
        /// <remarks>
        /// Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Activity>>> ActivitiesListWithHttpInfoAsync(List<Guid> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> ActivitiesScoresAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> ActivitiesScoresWithHttpInfoAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Подтверждение загрузки артефакта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArtefactSetUploadedAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Подтверждение загрузки артефакта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArtefactSetUploadedWithHttpInfoAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Справочник типов артефактов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ArtefactTypesList200ResponseInner>> ArtefactTypesListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Справочник типов артефактов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArtefactTypesList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ArtefactTypesList200ResponseInner>>> ArtefactTypesListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Запрос новой ссылки для загрузки
        /// </summary>
        /// <remarks>
        /// Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ArtefactUploadURLAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Запрос новой ссылки для загрузки
        /// </summary>
        /// <remarks>
        /// Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ArtefactUploadURLWithHttpInfoAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Загрузка артефакта
        /// </summary>
        /// <remarks>
        /// Артефакт предварительно загружается для передачи его в активности.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> ArtefactsCreateAsync(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Загрузка артефакта
        /// </summary>
        /// <remarks>
        /// Артефакт предварительно загружается для передачи его в активности.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> ArtefactsCreateWithHttpInfoAsync(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApplicationApiSync, IApplicationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Запись активностей Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivitiesCreate201Response</returns>
        public ActivitiesCreate201Response ActivitiesCreate(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ActivitiesCreate201Response> localVarResponse = ActivitiesCreateWithHttpInfo(activitiesCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запись активностей Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivitiesCreate201Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ActivitiesCreate201Response> ActivitiesCreateWithHttpInfo(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'activitiesCreateRequest' is set
            if (activitiesCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'activitiesCreateRequest' when calling ApplicationApi->ActivitiesCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activitiesCreateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ActivitiesCreate201Response>("/activities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запись активностей Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivitiesCreate201Response</returns>
        public async System.Threading.Tasks.Task<ActivitiesCreate201Response> ActivitiesCreateAsync(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ActivitiesCreate201Response> localVarResponse = await ActivitiesCreateWithHttpInfoAsync(activitiesCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запись активностей Каждая из активностей опционально может иметь метрики и артефакт.  Запись активностей доступна в коротком и расширенном форматах.  #### Короткий формат  Передается только массив активностей. Если они ссылаются на артефакты, эти артефакты должны быть предварительно [загружены](#operation/ArtefactsCreate). Ответ на такой запрос тоже включает в себя только массив с активностями.  #### Расширенный формат  В этом формате передается объект, который должен содержать активности в массиве, аналогичном короткому формату, и опционально может включать в себя еще артефакты для создания. В ответе на такой запрос, аналогично, возвращается объект, содержащий те же ключи. В возвращаемом массиве артефактов будут ссылки, по которым эти артефакты должны быть загружены.  &gt; Ссылки имеют ограниченный срок жизни. Если данные артефакта не были загружены в рамках этого периода, то нужно [запросить новую ссылку](#operation/ArtefactUploadURL).  &gt; До тех пор, пока указанные в активности артефакты не будут загружены, эта активность с ее баллами не будет учитываться в прогрессе традиции игрока.  После загрузки данных артефакта по полученной ссылке, нужно [подтвердить что загрузка завершена](#operation/ArtefactSetUploaded).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activitiesCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivitiesCreate201Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ActivitiesCreate201Response>> ActivitiesCreateWithHttpInfoAsync(ActivitiesCreateRequest activitiesCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'activitiesCreateRequest' is set
            if (activitiesCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'activitiesCreateRequest' when calling ApplicationApi->ActivitiesCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = activitiesCreateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ActivitiesCreate201Response>("/activities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список активностей Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Activity&gt;</returns>
        public List<Activity> ActivitiesList(List<Guid> ids, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Activity>> localVarResponse = ActivitiesListWithHttpInfo(ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список активностей Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Activity&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Activity>> ActivitiesListWithHttpInfo(List<Guid> ids, int operationIndex = 0)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ids' when calling ApplicationApi->ActivitiesList");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Activity>>("/activities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список активностей Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Activity&gt;</returns>
        public async System.Threading.Tasks.Task<List<Activity>> ActivitiesListAsync(List<Guid> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Activity>> localVarResponse = await ActivitiesListWithHttpInfoAsync(ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список активностей Если какие-то из указанных активностей не будут найдены, то они просто будут отсутствовать в ответе.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Идентификаторы активностей</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Activity&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Activity>>> ActivitiesListWithHttpInfoAsync(List<Guid> ids, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'ids' when calling ApplicationApi->ActivitiesList");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Activity>>("/activities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        public decimal ActivitiesScores(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> localVarResponse = ActivitiesScoresWithHttpInfo(traditionId, contextIds, playerIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        public Org.OpenAPITools.Client.ApiResponse<decimal> ActivitiesScoresWithHttpInfo(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesScores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<decimal>("/activities/scores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> ActivitiesScoresAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> localVarResponse = await ActivitiesScoresWithHttpInfoAsync(traditionId, contextIds, playerIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<decimal>> ActivitiesScoresWithHttpInfoAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ActivitiesScores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<decimal>("/activities/scores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Подтверждение загрузки артефакта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ArtefactSetUploaded(Guid artefactId, int operationIndex = 0)
        {
            ArtefactSetUploadedWithHttpInfo(artefactId);
        }

        /// <summary>
        /// Подтверждение загрузки артефакта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ArtefactSetUploadedWithHttpInfo(Guid artefactId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artefact_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(artefactId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactSetUploaded";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/artefacts/{artefact_id}/set-uploaded", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactSetUploaded", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Подтверждение загрузки артефакта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArtefactSetUploadedAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ArtefactSetUploadedWithHttpInfoAsync(artefactId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Подтверждение загрузки артефакта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ArtefactSetUploadedWithHttpInfoAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artefact_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(artefactId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactSetUploaded";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/artefacts/{artefact_id}/set-uploaded", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactSetUploaded", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Справочник типов артефактов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        public List<ArtefactTypesList200ResponseInner> ArtefactTypesList(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ArtefactTypesList200ResponseInner>> localVarResponse = ArtefactTypesListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Справочник типов артефактов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ArtefactTypesList200ResponseInner>> ArtefactTypesListWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationApi.ArtefactTypesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ArtefactTypesList200ResponseInner>>("/artefact-types", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactTypesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Справочник типов артефактов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ArtefactTypesList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ArtefactTypesList200ResponseInner>> ArtefactTypesListAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ArtefactTypesList200ResponseInner>> localVarResponse = await ArtefactTypesListWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Справочник типов артефактов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ArtefactTypesList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ArtefactTypesList200ResponseInner>>> ArtefactTypesListWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationApi.ArtefactTypesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ArtefactTypesList200ResponseInner>>("/artefact-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactTypesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос новой ссылки для загрузки Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ArtefactUploadURL(Guid artefactId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = ArtefactUploadURLWithHttpInfo(artefactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос новой ссылки для загрузки Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> ArtefactUploadURLWithHttpInfo(Guid artefactId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artefact_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(artefactId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactUploadURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/artefacts/{artefact_id}/upload-url", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactUploadURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос новой ссылки для загрузки Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ArtefactUploadURLAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await ArtefactUploadURLWithHttpInfoAsync(artefactId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос новой ссылки для загрузки Ссылка для загрузки данных артефактом имеет ограниченный срок жизни. После его завершения, если данные артефакта еще не были успешно загружены, нужно запрашивать новую ссылку. Загрузку данных по ссылке нужно выполнять методом PUT.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="artefactId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> ArtefactUploadURLWithHttpInfoAsync(Guid artefactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("artefact_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(artefactId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactUploadURL";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/artefacts/{artefact_id}/upload-url", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactUploadURL", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Загрузка артефакта Артефакт предварительно загружается для передачи его в активности.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Guid</returns>
        public Guid ArtefactsCreate(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Guid> localVarResponse = ArtefactsCreateWithHttpInfo(xArtefactType, xChecksum, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Загрузка артефакта Артефакт предварительно загружается для передачи его в активности.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Guid</returns>
        public Org.OpenAPITools.Client.ApiResponse<Guid> ArtefactsCreateWithHttpInfo(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0)
        {
            // verify the required parameter 'xChecksum' is set
            if (xChecksum == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xChecksum' when calling ApplicationApi->ArtefactsCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->ArtefactsCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Artefact-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xArtefactType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Checksum", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xChecksum)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Guid>("/artefacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Загрузка артефакта Артефакт предварительно загружается для передачи его в активности.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> ArtefactsCreateAsync(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Guid> localVarResponse = await ArtefactsCreateWithHttpInfoAsync(xArtefactType, xChecksum, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Загрузка артефакта Артефакт предварительно загружается для передачи его в активности.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xArtefactType">ID типа артефакта из [справочника](#operation/ArtefactTypesList).</param>
        /// <param name="xChecksum">SHA-1 контрольная сумма</param>
        /// <param name="body">Содержимое артефакта. Поддерживаемые типы:    - application/cyberiada-graphml   - application/json   - application/xml</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Guid>> ArtefactsCreateWithHttpInfoAsync(int xArtefactType, string xChecksum, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'xChecksum' is set
            if (xChecksum == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'xChecksum' when calling ApplicationApi->ArtefactsCreate");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling ApplicationApi->ArtefactsCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/*"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Artefact-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xArtefactType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Checksum", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xChecksum)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "ApplicationApi.ArtefactsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Guid>("/artefacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ArtefactsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
