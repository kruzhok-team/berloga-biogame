/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Импорт контекстов со свойствами
        /// </summary>
        /// <remarks>
        /// Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ContextsImport(Guid xApplication, System.IO.Stream body, int operationIndex = 0);

        /// <summary>
        /// Импорт контекстов со свойствами
        /// </summary>
        /// <remarks>
        /// Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ContextsImportWithHttpInfo(Guid xApplication, System.IO.Stream body, int operationIndex = 0);
        /// <summary>
        /// Список контекстов
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Context&gt;</returns>
        List<Context> ContextsList(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список контекстов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Context&gt;</returns>
        ApiResponse<List<Context>> ContextsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Импорт контекстов со свойствами
        /// </summary>
        /// <remarks>
        /// Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ContextsImportAsync(Guid xApplication, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Импорт контекстов со свойствами
        /// </summary>
        /// <remarks>
        /// Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ContextsImportWithHttpInfoAsync(Guid xApplication, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список контекстов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Context&gt;</returns>
        System.Threading.Tasks.Task<List<Context>> ContextsListAsync(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список контекстов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Context&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Context>>> ContextsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IAdminApiSync, IAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdminApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Импорт контекстов со свойствами Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ContextsImport(Guid xApplication, System.IO.Stream body, int operationIndex = 0)
        {
            ContextsImportWithHttpInfo(xApplication, body);
        }

        /// <summary>
        /// Импорт контекстов со свойствами Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> ContextsImportWithHttpInfo(Guid xApplication, System.IO.Stream body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->ContextsImport");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/tsv",
                "text/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Application", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xApplication)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.ContextsImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/contexts/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextsImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Импорт контекстов со свойствами Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ContextsImportAsync(Guid xApplication, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ContextsImportWithHttpInfoAsync(xApplication, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Импорт контекстов со свойствами Импортируемая таблица должна содержать колонки &#x60;id&#x60; и &#x60;description&#x60;. Содержащие в ячейках идентификатор (UUID) и описание контекста соответственно.  Оставшиеся колонки таблицы будут восприняты как свойства контекстов. Тип значения для свойства определяется на основе значений в ячейках колонки. Если все значения можно интерпретировать как числовые, то тип значения у свойства будет числовой. Если хоть одно значение не приводится к числу, то тип значения определяется как строковый.  В заголовках запроса так же необходимо указать ID приложения с контекстами которого будет выполнятся работа.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xApplication">ID приложения, для которого импортируются контексты.</param>
        /// <param name="body">Таблица контекстов для импорта.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> ContextsImportWithHttpInfoAsync(Guid xApplication, System.IO.Stream body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling AdminApi->ContextsImport");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "text/tsv", 
                "text/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Application", Org.OpenAPITools.Client.ClientUtils.ParameterToString(xApplication)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "AdminApi.ContextsImport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/contexts/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextsImport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список контекстов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Context&gt;</returns>
        public List<Context> ContextsList(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Context>> localVarResponse = ContextsListWithHttpInfo(offset, limit, id, tId, appId, desc);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список контекстов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Context&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Context>> ContextsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (appId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "app_id", appId));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }

            localVarRequestOptions.Operation = "AdminApi.ContextsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Context>>("/contexts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список контекстов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Context&gt;</returns>
        public async System.Threading.Tasks.Task<List<Context>> ContextsListAsync(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Context>> localVarResponse = await ContextsListWithHttpInfoAsync(offset, limit, id, tId, appId, desc, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список контекстов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="id">Фильтрация по ID контекстов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="appId">Фильтрация по ID приложения. (optional)</param>
        /// <param name="desc">Фильтрация по вхождению подстроки в описание контекста. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Context&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Context>>> ContextsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), List<Guid>? id = default(List<Guid>?), List<int>? tId = default(List<int>?), List<Guid>? appId = default(List<Guid>?), string? desc = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (appId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "app_id", appId));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }

            localVarRequestOptions.Operation = "AdminApi.ContextsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Context>>("/contexts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
