/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Список активностей с метриками
        /// </summary>
        /// <remarks>
        /// Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        List<ActivitiesMetricsList200ResponseInner> ActivitiesMetricsList(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);

        /// <summary>
        /// Список активностей с метриками
        /// </summary>
        /// <remarks>
        /// Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        ApiResponse<List<ActivitiesMetricsList200ResponseInner>> ActivitiesMetricsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);
        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        decimal ActivitiesScores(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);

        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        ApiResponse<decimal> ActivitiesScoresWithHttpInfo(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0);
        /// <summary>
        /// Баллы сгруппированные по традициям
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        List<ActivitiesScoresByTraditions200ResponseInner> ActivitiesScoresByTraditions(int talentId, int operationIndex = 0);

        /// <summary>
        /// Баллы сгруппированные по традициям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>> ActivitiesScoresByTraditionsWithHttpInfo(int talentId, int operationIndex = 0);
        /// <summary>
        /// Чтение активности
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivityRead200Response</returns>
        ActivityRead200Response ActivityRead(Guid activityId, int operationIndex = 0);

        /// <summary>
        /// Чтение активности
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivityRead200Response</returns>
        ApiResponse<ActivityRead200Response> ActivityReadWithHttpInfo(Guid activityId, int operationIndex = 0);
        /// <summary>
        /// Традиция контекста
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        int ContextTraditionID(Guid contextId, int operationIndex = 0);

        /// <summary>
        /// Традиция контекста
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        ApiResponse<int> ContextTraditionIDWithHttpInfo(Guid contextId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Список активностей с метриками
        /// </summary>
        /// <remarks>
        /// Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ActivitiesMetricsList200ResponseInner>> ActivitiesMetricsListAsync(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список активностей с метриками
        /// </summary>
        /// <remarks>
        /// Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivitiesMetricsList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivitiesMetricsList200ResponseInner>>> ActivitiesMetricsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        System.Threading.Tasks.Task<decimal> ActivitiesScoresAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Балл за активности
        /// </summary>
        /// <remarks>
        /// **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal>> ActivitiesScoresWithHttpInfoAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Баллы сгруппированные по традициям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ActivitiesScoresByTraditions200ResponseInner>> ActivitiesScoresByTraditionsAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Баллы сгруппированные по традициям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>>> ActivitiesScoresByTraditionsWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Чтение активности
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivityRead200Response</returns>
        System.Threading.Tasks.Task<ActivityRead200Response> ActivityReadAsync(Guid activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Чтение активности
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivityRead200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityRead200Response>> ActivityReadWithHttpInfoAsync(Guid activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Традиция контекста
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        System.Threading.Tasks.Task<int> ContextTraditionIDAsync(Guid contextId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Традиция контекста
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        System.Threading.Tasks.Task<ApiResponse<int>> ContextTraditionIDWithHttpInfoAsync(Guid contextId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApi : IServiceApiSync, IServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceApi : IServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServiceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Список активностей с метриками Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        public List<ActivitiesMetricsList200ResponseInner> ActivitiesMetricsList(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ActivitiesMetricsList200ResponseInner>> localVarResponse = ActivitiesMetricsListWithHttpInfo(offset, limit, applicationId, contextProperty, contextIds, since, until, playerIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список активностей с метриками Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ActivitiesMetricsList200ResponseInner>> ActivitiesMetricsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "application_id", applicationId));
            }
            if (contextProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_property", contextProperty));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesMetricsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActivitiesMetricsList200ResponseInner>>("/activities/metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesMetricsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список активностей с метриками Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivitiesMetricsList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivitiesMetricsList200ResponseInner>> ActivitiesMetricsListAsync(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ActivitiesMetricsList200ResponseInner>> localVarResponse = await ActivitiesMetricsListWithHttpInfoAsync(offset, limit, applicationId, contextProperty, contextIds, since, until, playerIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список активностей с метриками Обязательно указание либо идентификаторов контекстов &#x60;context_ids&#x60;, либо идентификатора приложения и свойств контекстов &#x60;context_property&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 100)</param>
        /// <param name="applicationId">ID приложения. Необходимо указывать при использовании фильтра &#x60;context_property&#x60;. (optional)</param>
        /// <param name="contextProperty">Свойства контекстов приложения. Заполняются в формате имени и значения объединенных пробелом (кодируется как &#x60;+&#x60; или &#x60;%20&#x60;). На каждое свойство допускается указывать до 5 значений. Множественные значения учитываются как &#x60;допустим любой из вариантов&#x60;, или же еще можно сказать что они объединяются логическим ИЛИ. В запросе можноственные значения нужно разделять вертикальной чертой. Пример фильтра по свойству &#x60;instrument&#x60; с тремя допустимыми значениями: &#x60;instrument+piano|guitar|drums&#x60;. (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов. (optional)</param>
        /// <param name="since"> (optional)</param>
        /// <param name="until"> (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivitiesMetricsList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ActivitiesMetricsList200ResponseInner>>> ActivitiesMetricsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), Guid? applicationId = default(Guid?), List<string>? contextProperty = default(List<string>?), List<Guid>? contextIds = default(List<Guid>?), DateTime? since = default(DateTime?), DateTime? until = default(DateTime?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (applicationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "application_id", applicationId));
            }
            if (contextProperty != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_property", contextProperty));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesMetricsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActivitiesMetricsList200ResponseInner>>("/activities/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesMetricsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>decimal</returns>
        public decimal ActivitiesScores(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> localVarResponse = ActivitiesScoresWithHttpInfo(traditionId, contextIds, playerIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of decimal</returns>
        public Org.OpenAPITools.Client.ApiResponse<decimal> ActivitiesScoresWithHttpInfo(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesScores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<decimal>("/activities/scores", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of decimal</returns>
        public async System.Threading.Tasks.Task<decimal> ActivitiesScoresAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<decimal> localVarResponse = await ActivitiesScoresWithHttpInfoAsync(traditionId, contextIds, playerIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Балл за активности **Обязательно** указание либо &#x60;tradition_id&#x60;, либо &#x60;context_ids&#x60;; эти параметры взаимоисключающие.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции (optional)</param>
        /// <param name="contextIds">Список идентификаторов контекстов (optional)</param>
        /// <param name="playerIds">Список игроков, активности которых попадут в выборку. Параметр доступен только при использовании авторизации &#x60;ServiceKey&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (decimal)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<decimal>> ActivitiesScoresWithHttpInfoAsync(int? traditionId = default(int?), List<Guid>? contextIds = default(List<Guid>?), List<Guid>? playerIds = default(List<Guid>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (contextIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "context_ids", contextIds));
            }
            if (playerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "player_ids", playerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesScores";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<decimal>("/activities/scores", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScores", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Баллы сгруппированные по традициям 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        public List<ActivitiesScoresByTraditions200ResponseInner> ActivitiesScoresByTraditions(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>> localVarResponse = ActivitiesScoresByTraditionsWithHttpInfo(talentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Баллы сгруппированные по традициям 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>> ActivitiesScoresByTraditionsWithHttpInfo(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "talent_id", talentId));

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesScoresByTraditions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActivitiesScoresByTraditions200ResponseInner>>("/activities/scores/traditions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScoresByTraditions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Баллы сгруппированные по традициям 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActivitiesScoresByTraditions200ResponseInner>> ActivitiesScoresByTraditionsAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>> localVarResponse = await ActivitiesScoresByTraditionsWithHttpInfoAsync(talentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Баллы сгруппированные по традициям 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">Получение баллов по всем PlayerID пользователя</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActivitiesScoresByTraditions200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ActivitiesScoresByTraditions200ResponseInner>>> ActivitiesScoresByTraditionsWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "talent_id", talentId));

            localVarRequestOptions.Operation = "ServiceApi.ActivitiesScoresByTraditions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActivitiesScoresByTraditions200ResponseInner>>("/activities/scores/traditions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivitiesScoresByTraditions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение активности 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ActivityRead200Response</returns>
        public ActivityRead200Response ActivityRead(Guid activityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ActivityRead200Response> localVarResponse = ActivityReadWithHttpInfo(activityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение активности 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ActivityRead200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<ActivityRead200Response> ActivityReadWithHttpInfo(Guid activityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activity_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.ActivityRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ActivityRead200Response>("/activities/{activity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivityRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение активности 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ActivityRead200Response</returns>
        public async System.Threading.Tasks.Task<ActivityRead200Response> ActivityReadAsync(Guid activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ActivityRead200Response> localVarResponse = await ActivityReadWithHttpInfoAsync(activityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение активности 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ActivityRead200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ActivityRead200Response>> ActivityReadWithHttpInfoAsync(Guid activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activity_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.ActivityRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ActivityRead200Response>("/activities/{activity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivityRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Традиция контекста 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>int</returns>
        public int ContextTraditionID(Guid contextId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = ContextTraditionIDWithHttpInfo(contextId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Традиция контекста 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of int</returns>
        public Org.OpenAPITools.Client.ApiResponse<int> ContextTraditionIDWithHttpInfo(Guid contextId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("context_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contextId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.ContextTraditionID";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<int>("/contexts/{context_id}/tradition-id", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextTraditionID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Традиция контекста 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of int</returns>
        public async System.Threading.Tasks.Task<int> ContextTraditionIDAsync(Guid contextId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<int> localVarResponse = await ContextTraditionIDWithHttpInfoAsync(contextId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Традиция контекста 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contextId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (int)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<int>> ContextTraditionIDWithHttpInfoAsync(Guid contextId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("context_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contextId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.ContextTraditionID";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<int>("/contexts/{context_id}/tradition-id", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContextTraditionID", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
