/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Контекст активностей
    /// </summary>
    [DataContract(Name = "Context")]
    public partial class Context : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Context() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="id">Идентификатор контекста активности. (required).</param>
        /// <param name="applicationId">applicationId (required).</param>
        /// <param name="traditionId">traditionId (required).</param>
        /// <param name="activityTypeId">activityTypeId (required).</param>
        /// <param name="description">description (required).</param>
        public Context(Guid id = default(Guid), Guid applicationId = default(Guid), int traditionId = default(int), int activityTypeId = default(int), string description = default(string))
        {
            this.Id = id;
            this.ApplicationId = applicationId;
            this.TraditionId = traditionId;
            this.ActivityTypeId = activityTypeId;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Context and cannot be null");
            }
            this.Description = description;
        }

        /// <summary>
        /// Идентификатор контекста активности.
        /// </summary>
        /// <value>Идентификатор контекста активности.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationId
        /// </summary>
        [DataMember(Name = "application_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets TraditionId
        /// </summary>
        [DataMember(Name = "tradition_id", IsRequired = true, EmitDefaultValue = true)]
        public int TraditionId { get; set; }

        /// <summary>
        /// Gets or Sets ActivityTypeId
        /// </summary>
        [DataMember(Name = "activity_type_id", IsRequired = true, EmitDefaultValue = true)]
        public int ActivityTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  TraditionId: ").Append(TraditionId).Append("\n");
            sb.Append("  ActivityTypeId: ").Append(ActivityTypeId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
