/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActivitiesCreate201Response
    /// </summary>
    [JsonConverter(typeof(ActivitiesCreate201ResponseJsonConverter))]
    [DataContract(Name = "ActivitiesCreate_201_response")]
    public partial class ActivitiesCreate201Response : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesCreate201Response" /> class
        /// with the <see cref="List{ActivitiesCreateListInner}" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of List&lt;ActivitiesCreateListInner&gt;.</param>
        public ActivitiesCreate201Response(List<ActivitiesCreateListInner> actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesCreate201Response" /> class
        /// with the <see cref="ActivitiesCreateObject" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ActivitiesCreateObject.</param>
        public ActivitiesCreate201Response(ActivitiesCreateObject actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(ActivitiesCreateObject) || value is ActivitiesCreateObject)
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(List<ActivitiesCreateListInner>) || value is List<ActivitiesCreateListInner>)
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: ActivitiesCreateObject, List<ActivitiesCreateListInner>");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `List&lt;ActivitiesCreateListInner&gt;`. If the actual instance is not `List&lt;ActivitiesCreateListInner&gt;`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of List&lt;ActivitiesCreateListInner&gt;</returns>
        public List<ActivitiesCreateListInner> GetList()
        {
            return (List<ActivitiesCreateListInner>)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ActivitiesCreateObject`. If the actual instance is not `ActivitiesCreateObject`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ActivitiesCreateObject</returns>
        public ActivitiesCreateObject GetActivitiesCreateObject()
        {
            return (ActivitiesCreateObject)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivitiesCreate201Response {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, ActivitiesCreate201Response.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of ActivitiesCreate201Response
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of ActivitiesCreate201Response</returns>
        public static ActivitiesCreate201Response FromJson(string jsonString)
        {
            ActivitiesCreate201Response newActivitiesCreate201Response = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newActivitiesCreate201Response;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ActivitiesCreateObject).GetProperty("AdditionalProperties") == null)
                {
                    newActivitiesCreate201Response = new ActivitiesCreate201Response(JsonConvert.DeserializeObject<ActivitiesCreateObject>(jsonString, ActivitiesCreate201Response.SerializerSettings));
                }
                else
                {
                    newActivitiesCreate201Response = new ActivitiesCreate201Response(JsonConvert.DeserializeObject<ActivitiesCreateObject>(jsonString, ActivitiesCreate201Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ActivitiesCreateObject");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ActivitiesCreateObject: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(List<ActivitiesCreateListInner>).GetProperty("AdditionalProperties") == null)
                {
                    newActivitiesCreate201Response = new ActivitiesCreate201Response(JsonConvert.DeserializeObject<List<ActivitiesCreateListInner>>(jsonString, ActivitiesCreate201Response.SerializerSettings));
                }
                else
                {
                    newActivitiesCreate201Response = new ActivitiesCreate201Response(JsonConvert.DeserializeObject<List<ActivitiesCreateListInner>>(jsonString, ActivitiesCreate201Response.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("List<ActivitiesCreateListInner>");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into List<ActivitiesCreateListInner>: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + String.Join(",", matchedTypes));
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newActivitiesCreate201Response;
        }


        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for ActivitiesCreate201Response
    /// </summary>
    public class ActivitiesCreate201ResponseJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(ActivitiesCreate201Response).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return ActivitiesCreate201Response.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return ActivitiesCreate201Response.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
