/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ActivityWriteObjectArtefactsInner
    /// </summary>
    [DataContract(Name = "ActivityWriteObject_artefacts_inner")]
    public partial class ActivityWriteObjectArtefactsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityWriteObjectArtefactsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityWriteObjectArtefactsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityWriteObjectArtefactsInner" /> class.
        /// </summary>
        /// <param name="id">ID артефакта, по которому на него ссылаются активности, переданные в том же запросе. (required).</param>
        /// <param name="contentType">MIME-тип артефакта. (required).</param>
        /// <param name="artefactTypeId">ID типа артефакта из [справочника](#operation/ArtefactTypesList). (required).</param>
        /// <param name="checksum">SHA-1 контрольная сумма (required).</param>
        public ActivityWriteObjectArtefactsInner(Guid id = default(Guid), string contentType = default(string), int artefactTypeId = default(int), string checksum = default(string))
        {
            this.Id = id;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for ActivityWriteObjectArtefactsInner and cannot be null");
            }
            this.ContentType = contentType;
            this.ArtefactTypeId = artefactTypeId;
            // to ensure "checksum" is required (not null)
            if (checksum == null)
            {
                throw new ArgumentNullException("checksum is a required property for ActivityWriteObjectArtefactsInner and cannot be null");
            }
            this.Checksum = checksum;
        }

        /// <summary>
        /// ID артефакта, по которому на него ссылаются активности, переданные в том же запросе.
        /// </summary>
        /// <value>ID артефакта, по которому на него ссылаются активности, переданные в том же запросе.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// MIME-тип артефакта.
        /// </summary>
        /// <value>MIME-тип артефакта.</value>
        [DataMember(Name = "content_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// ID типа артефакта из [справочника](#operation/ArtefactTypesList).
        /// </summary>
        /// <value>ID типа артефакта из [справочника](#operation/ArtefactTypesList).</value>
        [DataMember(Name = "artefact_type_id", IsRequired = true, EmitDefaultValue = true)]
        public int ArtefactTypeId { get; set; }

        /// <summary>
        /// SHA-1 контрольная сумма
        /// </summary>
        /// <value>SHA-1 контрольная сумма</value>
        [DataMember(Name = "checksum", IsRequired = true, EmitDefaultValue = true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityWriteObjectArtefactsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ArtefactTypeId: ").Append(ArtefactTypeId).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
