/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Сохраненная игровая активность.
    /// </summary>
    [DataContract(Name = "Activity")]
    public partial class Activity : IValidatableObject
    {
        /// <summary>
        /// Defines Quarantine
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QuarantineEnum
        {
            /// <summary>
            /// Enum MissingArtefact for value: missing_artefact
            /// </summary>
            [EnumMember(Value = "missing_artefact")]
            MissingArtefact = 1,

            /// <summary>
            /// Enum InvalidArtefact for value: invalid_artefact
            /// </summary>
            [EnumMember(Value = "invalid_artefact")]
            InvalidArtefact = 2
        }


        /// <summary>
        /// Gets or Sets Quarantine
        /// </summary>
        [DataMember(Name = "quarantine", IsRequired = true, EmitDefaultValue = true)]
        public QuarantineEnum Quarantine { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="id">Идентификатор активности. (required).</param>
        /// <param name="createdAt">Дата записи активности. (required).</param>
        /// <param name="contextId">Идентификатор контекста активности. (required).</param>
        /// <param name="playerId">Идентификатор игрока. (required).</param>
        /// <param name="appVersion">Версия приложения, в которой была произведена активность. (required).</param>
        /// <param name="scores">Балл эффективности активности. (required).</param>
        /// <param name="artefactId">artefactId (required).</param>
        /// <param name="quarantine">quarantine (required).</param>
        public Activity(Guid id = default(Guid), DateTime createdAt = default(DateTime), Guid contextId = default(Guid), Guid playerId = default(Guid), string appVersion = default(string), decimal scores = default(decimal), Guid artefactId = default(Guid), QuarantineEnum quarantine = default(QuarantineEnum))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.ContextId = contextId;
            this.PlayerId = playerId;
            // to ensure "appVersion" is required (not null)
            if (appVersion == null)
            {
                throw new ArgumentNullException("appVersion is a required property for Activity and cannot be null");
            }
            this.AppVersion = appVersion;
            this.Scores = scores;
            this.ArtefactId = artefactId;
            this.Quarantine = quarantine;
        }

        /// <summary>
        /// Идентификатор активности.
        /// </summary>
        /// <value>Идентификатор активности.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Дата записи активности.
        /// </summary>
        /// <value>Дата записи активности.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Идентификатор контекста активности.
        /// </summary>
        /// <value>Идентификатор контекста активности.</value>
        [DataMember(Name = "context_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ContextId { get; set; }

        /// <summary>
        /// Идентификатор игрока.
        /// </summary>
        /// <value>Идентификатор игрока.</value>
        [DataMember(Name = "player_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid PlayerId { get; set; }

        /// <summary>
        /// Версия приложения, в которой была произведена активность.
        /// </summary>
        /// <value>Версия приложения, в которой была произведена активность.</value>
        [DataMember(Name = "app_version", IsRequired = true, EmitDefaultValue = true)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Балл эффективности активности.
        /// </summary>
        /// <value>Балл эффективности активности.</value>
        [DataMember(Name = "scores", IsRequired = true, EmitDefaultValue = true)]
        public decimal Scores { get; set; }

        /// <summary>
        /// Gets or Sets ArtefactId
        /// </summary>
        [DataMember(Name = "artefact_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ArtefactId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  ArtefactId: ").Append(ArtefactId).Append("\n");
            sb.Append("  Quarantine: ").Append(Quarantine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
