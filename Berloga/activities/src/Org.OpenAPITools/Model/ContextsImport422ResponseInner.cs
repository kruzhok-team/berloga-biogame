/*
 * Активности Берлоги
 *
 * Сервис активностей и артефактов игр Берлоги.  ## v0.5  - Добавлены административные операции импорта и чтения списка контекстов.  ## v0.4  - Добавлен [эндпоинт чтения списка активностей с метриками](#operation/ActivitiesMetricsList).  ## v0.3 - Добавлен [метод чтения баллов сгруппированных по традициям](#operation/ActivitiesScoresByTraditions). - Добавлен [эндпоинт чтения активности по ее ID](#operation/ActivityRead). - Добавлен [эндпоинт чтения ID традиции контекста](#operation/ContextTraditionID).  ## v0.2 [Для передачи активности](#operation/ActivitiesCreate) теперь обязательно нужно указывать версию приложения.
 *
 * The version of the OpenAPI document: 0.5
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ContextsImport422ResponseInner
    /// </summary>
    [DataContract(Name = "ContextsImport_422_response_inner")]
    public partial class ContextsImport422ResponseInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextsImport422ResponseInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContextsImport422ResponseInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContextsImport422ResponseInner" /> class.
        /// </summary>
        /// <param name="index">Индекс строки в таблице за исключением строки заголовка. (required).</param>
        /// <param name="row">Данные импортируемые строкой таблицы. (required).</param>
        /// <param name="errors">Ошибки валидации строки..</param>
        public ContextsImport422ResponseInner(int index = default(int), Dictionary<string, string> row = default(Dictionary<string, string>), List<string> errors = default(List<string>))
        {
            this.Index = index;
            // to ensure "row" is required (not null)
            if (row == null)
            {
                throw new ArgumentNullException("row is a required property for ContextsImport422ResponseInner and cannot be null");
            }
            this.Row = row;
            this.Errors = errors;
        }

        /// <summary>
        /// Индекс строки в таблице за исключением строки заголовка.
        /// </summary>
        /// <value>Индекс строки в таблице за исключением строки заголовка.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// Данные импортируемые строкой таблицы.
        /// </summary>
        /// <value>Данные импортируемые строкой таблицы.</value>
        [DataMember(Name = "row", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, string> Row { get; set; }

        /// <summary>
        /// Ошибки валидации строки.
        /// </summary>
        /// <value>Ошибки валидации строки.</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<string> Errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContextsImport422ResponseInner {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
