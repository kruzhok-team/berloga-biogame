/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Приложение.
    /// </summary>
    [DataContract(Name = "Application")]
    public partial class Application : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Application() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Application" /> class.
        /// </summary>
        /// <param name="id">Идентификатор приложения. (required).</param>
        /// <param name="createdAt">Дата создания приложения. (required).</param>
        /// <param name="updatedAt">Дата обновления приложения. (required).</param>
        /// <param name="isPublic">Является ли приложене опубликованным. (required).</param>
        /// <param name="name">Название приложения. (required).</param>
        /// <param name="iconUrl">URL изображения приложения для лаунчера. (required).</param>
        /// <param name="packageName">Идентификатор Android приложения. (required).</param>
        /// <param name="storeUrl">URL страницы для скачивания приложения. (required).</param>
        /// <param name="launchUrl">DeepLink для запуска приложения. (required).</param>
        /// <param name="intro">Вступительное описание. (required).</param>
        public Application(Guid id = default(Guid), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), bool isPublic = default(bool), string name = default(string), string iconUrl = default(string), string packageName = default(string), string storeUrl = default(string), string launchUrl = default(string), string intro = default(string))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.IsPublic = isPublic;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Application and cannot be null");
            }
            this.Name = name;
            // to ensure "iconUrl" is required (not null)
            if (iconUrl == null)
            {
                throw new ArgumentNullException("iconUrl is a required property for Application and cannot be null");
            }
            this.IconUrl = iconUrl;
            // to ensure "packageName" is required (not null)
            if (packageName == null)
            {
                throw new ArgumentNullException("packageName is a required property for Application and cannot be null");
            }
            this.PackageName = packageName;
            // to ensure "storeUrl" is required (not null)
            if (storeUrl == null)
            {
                throw new ArgumentNullException("storeUrl is a required property for Application and cannot be null");
            }
            this.StoreUrl = storeUrl;
            // to ensure "launchUrl" is required (not null)
            if (launchUrl == null)
            {
                throw new ArgumentNullException("launchUrl is a required property for Application and cannot be null");
            }
            this.LaunchUrl = launchUrl;
            // to ensure "intro" is required (not null)
            if (intro == null)
            {
                throw new ArgumentNullException("intro is a required property for Application and cannot be null");
            }
            this.Intro = intro;
        }

        /// <summary>
        /// Идентификатор приложения.
        /// </summary>
        /// <value>Идентификатор приложения.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Дата создания приложения.
        /// </summary>
        /// <value>Дата создания приложения.</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Дата обновления приложения.
        /// </summary>
        /// <value>Дата обновления приложения.</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Является ли приложене опубликованным.
        /// </summary>
        /// <value>Является ли приложене опубликованным.</value>
        [DataMember(Name = "is_public", IsRequired = true, EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Название приложения.
        /// </summary>
        /// <value>Название приложения.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// URL изображения приложения для лаунчера.
        /// </summary>
        /// <value>URL изображения приложения для лаунчера.</value>
        [DataMember(Name = "icon_url", IsRequired = true, EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Идентификатор Android приложения.
        /// </summary>
        /// <value>Идентификатор Android приложения.</value>
        [DataMember(Name = "package_name", IsRequired = true, EmitDefaultValue = true)]
        public string PackageName { get; set; }

        /// <summary>
        /// URL страницы для скачивания приложения.
        /// </summary>
        /// <value>URL страницы для скачивания приложения.</value>
        [DataMember(Name = "store_url", IsRequired = true, EmitDefaultValue = true)]
        public string StoreUrl { get; set; }

        /// <summary>
        /// DeepLink для запуска приложения.
        /// </summary>
        /// <value>DeepLink для запуска приложения.</value>
        [DataMember(Name = "launch_url", IsRequired = true, EmitDefaultValue = true)]
        public string LaunchUrl { get; set; }

        /// <summary>
        /// Вступительное описание.
        /// </summary>
        /// <value>Вступительное описание.</value>
        [DataMember(Name = "intro", IsRequired = true, EmitDefaultValue = true)]
        public string Intro { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Application {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  StoreUrl: ").Append(StoreUrl).Append("\n");
            sb.Append("  LaunchUrl: ").Append(LaunchUrl).Append("\n");
            sb.Append("  Intro: ").Append(Intro).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
