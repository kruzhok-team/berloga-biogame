/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IssueTokenRequest
    /// </summary>
    [DataContract(Name = "IssueToken_request")]
    public partial class IssueTokenRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IssueTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssueTokenRequest" /> class.
        /// </summary>
        /// <param name="applicationId">Идентификатор приложения. (required).</param>
        /// <param name="playerId">Идентификатор игрока. (required).</param>
        /// <param name="playerSecret">Секретный ключ игрока. (required).</param>
        public IssueTokenRequest(Guid applicationId = default(Guid), Guid playerId = default(Guid), string playerSecret = default(string))
        {
            this.ApplicationId = applicationId;
            this.PlayerId = playerId;
            // to ensure "playerSecret" is required (not null)
            if (playerSecret == null)
            {
                throw new ArgumentNullException("playerSecret is a required property for IssueTokenRequest and cannot be null");
            }
            this.PlayerSecret = playerSecret;
        }

        /// <summary>
        /// Идентификатор приложения.
        /// </summary>
        /// <value>Идентификатор приложения.</value>
        [DataMember(Name = "application_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ApplicationId { get; set; }

        /// <summary>
        /// Идентификатор игрока.
        /// </summary>
        /// <value>Идентификатор игрока.</value>
        [DataMember(Name = "player_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid PlayerId { get; set; }

        /// <summary>
        /// Секретный ключ игрока.
        /// </summary>
        /// <value>Секретный ключ игрока.</value>
        [DataMember(Name = "player_secret", IsRequired = true, EmitDefaultValue = true)]
        public string PlayerSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssueTokenRequest {\n");
            sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  PlayerSecret: ").Append(PlayerSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
