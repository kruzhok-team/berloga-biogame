/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerGet200Response</returns>
        PlayerGet200Response PlayerGet(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerGet200Response</returns>
        ApiResponse<PlayerGet200Response> PlayerGetWithHttpInfo(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Список PlayerID пользователя Таланта
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> TalentUserPlayers(int talentId, int operationIndex = 0);

        /// <summary>
        /// Список PlayerID пользователя Таланта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> TalentUserPlayersWithHttpInfo(int talentId, int operationIndex = 0);
        /// <summary>
        /// TalentOAuth токен пользователя
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string TalentUserTokenGet(int talentId, int operationIndex = 0);

        /// <summary>
        /// TalentOAuth токен пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TalentUserTokenGetWithHttpInfo(int talentId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerGet200Response</returns>
        System.Threading.Tasks.Task<PlayerGet200Response> PlayerGetAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerGet200Response>> PlayerGetWithHttpInfoAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список PlayerID пользователя Таланта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> TalentUserPlayersAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список PlayerID пользователя Таланта
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> TalentUserPlayersWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// TalentOAuth токен пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TalentUserTokenGetAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// TalentOAuth токен пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TalentUserTokenGetWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IServiceApi : IServiceApiSync, IServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ServiceApi : IServiceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServiceApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ServiceApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerGet200Response</returns>
        public PlayerGet200Response PlayerGet(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> localVarResponse = PlayerGetWithHttpInfo(playerId, getTalentId, getPlayerIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> PlayerGetWithHttpInfo(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            if (getTalentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_talent_id", getTalentId));
            }
            if (getPlayerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_player_ids", getPlayerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.PlayerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlayerGet200Response>("/player/{player_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerGet200Response</returns>
        public async System.Threading.Tasks.Task<PlayerGet200Response> PlayerGetAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> localVarResponse = await PlayerGetWithHttpInfoAsync(playerId, getTalentId, getPlayerIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response>> PlayerGetWithHttpInfoAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            if (getTalentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_talent_id", getTalentId));
            }
            if (getPlayerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_player_ids", getPlayerIds));
            }

            localVarRequestOptions.Operation = "ServiceApi.PlayerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlayerGet200Response>("/player/{player_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список PlayerID пользователя Таланта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> TalentUserPlayers(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Guid>> localVarResponse = TalentUserPlayersWithHttpInfo(talentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список PlayerID пользователя Таланта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Guid>> TalentUserPlayersWithHttpInfo(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("talent_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(talentId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.TalentUserPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/talent/{talent_id}/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentUserPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список PlayerID пользователя Таланта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> TalentUserPlayersAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Guid>> localVarResponse = await TalentUserPlayersWithHttpInfoAsync(talentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список PlayerID пользователя Таланта 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Guid>>> TalentUserPlayersWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("talent_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(talentId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.TalentUserPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/talent/{talent_id}/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentUserPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TalentOAuth токен пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string TalentUserTokenGet(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = TalentUserTokenGetWithHttpInfo(talentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TalentOAuth токен пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> TalentUserTokenGetWithHttpInfo(int talentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("talent_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(talentId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.TalentUserTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/talent/{talent_id}/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentUserTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TalentOAuth токен пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TalentUserTokenGetAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await TalentUserTokenGetWithHttpInfoAsync(talentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TalentOAuth токен пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="talentId">ID пользователя Таланта</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> TalentUserTokenGetWithHttpInfoAsync(int talentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("talent_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(talentId)); // path parameter

            localVarRequestOptions.Operation = "ServiceApi.TalentUserTokenGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/talent/{talent_id}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentUserTokenGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
