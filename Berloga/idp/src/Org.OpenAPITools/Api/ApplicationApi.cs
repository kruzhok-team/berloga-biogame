/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Список приложений
        /// </summary>
        /// <remarks>
        /// Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Application&gt;</returns>
        List<Application> ApplicationsList(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список приложений
        /// </summary>
        /// <remarks>
        /// Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Application&gt;</returns>
        ApiResponse<List<Application>> ApplicationsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// Запрос аутентификационного токена
        /// </summary>
        /// <remarks>
        /// Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssueToken201Response</returns>
        IssueToken201Response IssueToken(IssueTokenRequest issueTokenRequest, int operationIndex = 0);

        /// <summary>
        /// Запрос аутентификационного токена
        /// </summary>
        /// <remarks>
        /// Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssueToken201Response</returns>
        ApiResponse<IssueToken201Response> IssueTokenWithHttpInfo(IssueTokenRequest issueTokenRequest, int operationIndex = 0);
        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerGet200Response</returns>
        PlayerGet200Response PlayerGet(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerGet200Response</returns>
        ApiResponse<PlayerGet200Response> PlayerGetWithHttpInfo(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Регистрация нового игрока
        /// </summary>
        /// <remarks>
        /// Регистрация нового PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayersCreate201Response</returns>
        PlayersCreate201Response PlayersCreate(PlayersCreateRequest playersCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Регистрация нового игрока
        /// </summary>
        /// <remarks>
        /// Регистрация нового PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayersCreate201Response</returns>
        ApiResponse<PlayersCreate201Response> PlayersCreateWithHttpInfo(PlayersCreateRequest playersCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Миграция legacy PlayerID
        /// </summary>
        /// <remarks>
        /// Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayersMigrate200Response</returns>
        PlayersMigrate200Response PlayersMigrate(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0);

        /// <summary>
        /// Миграция legacy PlayerID
        /// </summary>
        /// <remarks>
        /// Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayersMigrate200Response</returns>
        ApiResponse<PlayersMigrate200Response> PlayersMigrateWithHttpInfo(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0);
        /// <summary>
        /// Завершение авторизации в Таланте
        /// </summary>
        /// <remarks>
        /// Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject</returns>
        InlineObject TalentOAuthComplete(string code, Guid state, int operationIndex = 0);

        /// <summary>
        /// Завершение авторизации в Таланте
        /// </summary>
        /// <remarks>
        /// Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject</returns>
        ApiResponse<InlineObject> TalentOAuthCompleteWithHttpInfo(string code, Guid state, int operationIndex = 0);
        /// <summary>
        /// Перенаправление на авторизацию
        /// </summary>
        /// <remarks>
        /// Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject</returns>
        InlineObject TalentOAuthConnect(string? redirectUri = default(string?), int operationIndex = 0);

        /// <summary>
        /// Перенаправление на авторизацию
        /// </summary>
        /// <remarks>
        /// Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject</returns>
        ApiResponse<InlineObject> TalentOAuthConnectWithHttpInfo(string? redirectUri = default(string?), int operationIndex = 0);
        /// <summary>
        /// Отсоединение учетной записи Таланта
        /// </summary>
        /// <remarks>
        /// Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TalentOAuthDisconnect(int operationIndex = 0);

        /// <summary>
        /// Отсоединение учетной записи Таланта
        /// </summary>
        /// <remarks>
        /// Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TalentOAuthDisconnectWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Список приложений
        /// </summary>
        /// <remarks>
        /// Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Application&gt;</returns>
        System.Threading.Tasks.Task<List<Application>> ApplicationsListAsync(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список приложений
        /// </summary>
        /// <remarks>
        /// Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Application&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Application>>> ApplicationsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Запрос аутентификационного токена
        /// </summary>
        /// <remarks>
        /// Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueToken201Response</returns>
        System.Threading.Tasks.Task<IssueToken201Response> IssueTokenAsync(IssueTokenRequest issueTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Запрос аутентификационного токена
        /// </summary>
        /// <remarks>
        /// Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueToken201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssueToken201Response>> IssueTokenWithHttpInfoAsync(IssueTokenRequest issueTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerGet200Response</returns>
        System.Threading.Tasks.Task<PlayerGet200Response> PlayerGetAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Чтение информации об игроке
        /// </summary>
        /// <remarks>
        /// Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerGet200Response>> PlayerGetWithHttpInfoAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Регистрация нового игрока
        /// </summary>
        /// <remarks>
        /// Регистрация нового PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayersCreate201Response</returns>
        System.Threading.Tasks.Task<PlayersCreate201Response> PlayersCreateAsync(PlayersCreateRequest playersCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Регистрация нового игрока
        /// </summary>
        /// <remarks>
        /// Регистрация нового PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayersCreate201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayersCreate201Response>> PlayersCreateWithHttpInfoAsync(PlayersCreateRequest playersCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Миграция legacy PlayerID
        /// </summary>
        /// <remarks>
        /// Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayersMigrate200Response</returns>
        System.Threading.Tasks.Task<PlayersMigrate200Response> PlayersMigrateAsync(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Миграция legacy PlayerID
        /// </summary>
        /// <remarks>
        /// Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayersMigrate200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayersMigrate200Response>> PlayersMigrateWithHttpInfoAsync(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Завершение авторизации в Таланте
        /// </summary>
        /// <remarks>
        /// Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject</returns>
        System.Threading.Tasks.Task<InlineObject> TalentOAuthCompleteAsync(string code, Guid state, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Завершение авторизации в Таланте
        /// </summary>
        /// <remarks>
        /// Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject>> TalentOAuthCompleteWithHttpInfoAsync(string code, Guid state, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Перенаправление на авторизацию
        /// </summary>
        /// <remarks>
        /// Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject</returns>
        System.Threading.Tasks.Task<InlineObject> TalentOAuthConnectAsync(string? redirectUri = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Перенаправление на авторизацию
        /// </summary>
        /// <remarks>
        /// Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineObject>> TalentOAuthConnectWithHttpInfoAsync(string? redirectUri = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Отсоединение учетной записи Таланта
        /// </summary>
        /// <remarks>
        /// Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TalentOAuthDisconnectAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Отсоединение учетной записи Таланта
        /// </summary>
        /// <remarks>
        /// Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TalentOAuthDisconnectWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApplicationApiSync, IApplicationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Список приложений Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Application&gt;</returns>
        public List<Application> ApplicationsList(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Application>> localVarResponse = ApplicationsListWithHttpInfo(offset, limit, isPublic, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список приложений Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Application&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Application>> ApplicationsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isPublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_public", isPublic));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ApplicationsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Application>>("/applications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список приложений Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Application&gt;</returns>
        public async System.Threading.Tasks.Task<List<Application>> ApplicationsListAsync(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Application>> localVarResponse = await ApplicationsListWithHttpInfoAsync(offset, limit, isPublic, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список приложений Список приложений.  По-умолчанию сортируется по дате создания от новых к старым (&#x60;order_by&#x3D;created_at_desc&#x60;) и включает в себя только опубликованные приложения (&#x60;is_public&#x3D;true&#x60;).
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="isPublic">Фильтрация по публичности приложений.  - true - только опубликованные - false - только не опубликованные - all - все (optional, default to true)</param>
        /// <param name="orderBy">Порядок сортировки результатов. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Application&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Application>>> ApplicationsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? isPublic = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isPublic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_public", isPublic));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ApplicationsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Application>>("/applications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplicationsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос аутентификационного токена Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IssueToken201Response</returns>
        public IssueToken201Response IssueToken(IssueTokenRequest issueTokenRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<IssueToken201Response> localVarResponse = IssueTokenWithHttpInfo(issueTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос аутентификационного токена Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IssueToken201Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<IssueToken201Response> IssueTokenWithHttpInfo(IssueTokenRequest issueTokenRequest, int operationIndex = 0)
        {
            // verify the required parameter 'issueTokenRequest' is set
            if (issueTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'issueTokenRequest' when calling ApplicationApi->IssueToken");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = issueTokenRequest;

            localVarRequestOptions.Operation = "ApplicationApi.IssueToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<IssueToken201Response>("/issue-token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запрос аутентификационного токена Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueToken201Response</returns>
        public async System.Threading.Tasks.Task<IssueToken201Response> IssueTokenAsync(IssueTokenRequest issueTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IssueToken201Response> localVarResponse = await IssueTokenWithHttpInfoAsync(issueTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запрос аутентификационного токена Запрос аутентфикационного токена игрока.  Токен имеет ограниченное непродолжительное время жизни.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="issueTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueToken201Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IssueToken201Response>> IssueTokenWithHttpInfoAsync(IssueTokenRequest issueTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'issueTokenRequest' is set
            if (issueTokenRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'issueTokenRequest' when calling ApplicationApi->IssueToken");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = issueTokenRequest;

            localVarRequestOptions.Operation = "ApplicationApi.IssueToken";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IssueToken201Response>("/issue-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerGet200Response</returns>
        public PlayerGet200Response PlayerGet(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> localVarResponse = PlayerGetWithHttpInfo(playerId, getTalentId, getPlayerIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerGet200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> PlayerGetWithHttpInfo(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            if (getTalentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_talent_id", getTalentId));
            }
            if (getPlayerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_player_ids", getPlayerIds));
            }

            localVarRequestOptions.Operation = "ApplicationApi.PlayerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlayerGet200Response>("/player/{player_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerGet200Response</returns>
        public async System.Threading.Tasks.Task<PlayerGet200Response> PlayerGetAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response> localVarResponse = await PlayerGetWithHttpInfoAsync(playerId, getTalentId, getPlayerIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение информации об игроке Чтение информации об игроке.  По-умолчанию ответ не содержит каких-либо данных. Для того чтобы добавить в ответ какие-то из параметров игрока, нужно указать их соотвествующими параметрами запроса &#x60;get_*&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">PlayerID игрока</param>
        /// <param name="getTalentId">Включить в ответ &#x60;talent_id&#x60; (optional, default to false)</param>
        /// <param name="getPlayerIds">Включить в ответ &#x60;player_ids&#x60; (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerGet200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PlayerGet200Response>> PlayerGetWithHttpInfoAsync(Guid playerId, bool? getTalentId = default(bool?), bool? getPlayerIds = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            if (getTalentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_talent_id", getTalentId));
            }
            if (getPlayerIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "get_player_ids", getPlayerIds));
            }

            localVarRequestOptions.Operation = "ApplicationApi.PlayerGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (ServiceKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Service-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Service-Key", this.Configuration.GetApiKeyWithPrefix("X-Service-Key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlayerGet200Response>("/player/{player_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayerGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Регистрация нового игрока Регистрация нового PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayersCreate201Response</returns>
        public PlayersCreate201Response PlayersCreate(PlayersCreateRequest playersCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PlayersCreate201Response> localVarResponse = PlayersCreateWithHttpInfo(playersCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Регистрация нового игрока Регистрация нового PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayersCreate201Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<PlayersCreate201Response> PlayersCreateWithHttpInfo(PlayersCreateRequest playersCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'playersCreateRequest' is set
            if (playersCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'playersCreateRequest' when calling ApplicationApi->PlayersCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playersCreateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.PlayersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayersCreate201Response>("/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Регистрация нового игрока Регистрация нового PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayersCreate201Response</returns>
        public async System.Threading.Tasks.Task<PlayersCreate201Response> PlayersCreateAsync(PlayersCreateRequest playersCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PlayersCreate201Response> localVarResponse = await PlayersCreateWithHttpInfoAsync(playersCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Регистрация нового игрока Регистрация нового PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayersCreate201Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PlayersCreate201Response>> PlayersCreateWithHttpInfoAsync(PlayersCreateRequest playersCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'playersCreateRequest' is set
            if (playersCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'playersCreateRequest' when calling ApplicationApi->PlayersCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playersCreateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.PlayersCreate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayersCreate201Response>("/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Миграция legacy PlayerID Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayersMigrate200Response</returns>
        public PlayersMigrate200Response PlayersMigrate(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PlayersMigrate200Response> localVarResponse = PlayersMigrateWithHttpInfo(playersMigrateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Миграция legacy PlayerID Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayersMigrate200Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<PlayersMigrate200Response> PlayersMigrateWithHttpInfo(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'playersMigrateRequest' is set
            if (playersMigrateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'playersMigrateRequest' when calling ApplicationApi->PlayersMigrate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playersMigrateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.PlayersMigrate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayersMigrate200Response>("/players/migrate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersMigrate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Миграция legacy PlayerID Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayersMigrate200Response</returns>
        public async System.Threading.Tasks.Task<PlayersMigrate200Response> PlayersMigrateAsync(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PlayersMigrate200Response> localVarResponse = await PlayersMigrateWithHttpInfoAsync(playersMigrateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Миграция legacy PlayerID Миграция имеющихся данных о PlayerID под актуальное API сервисов Берлоги.  В ответе возвращается PlayerSecret, который обязательно нужно сохранить на клиенте. Без него не получится пройти авторизацию клиентского API и они станут не доступны для этого PlayerID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playersMigrateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayersMigrate200Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PlayersMigrate200Response>> PlayersMigrateWithHttpInfoAsync(PlayersMigrateRequest playersMigrateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'playersMigrateRequest' is set
            if (playersMigrateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'playersMigrateRequest' when calling ApplicationApi->PlayersMigrate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = playersMigrateRequest;

            localVarRequestOptions.Operation = "ApplicationApi.PlayersMigrate";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayersMigrate200Response>("/players/migrate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayersMigrate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Завершение авторизации в Таланте Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject</returns>
        public InlineObject TalentOAuthComplete(string code, Guid state, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InlineObject> localVarResponse = TalentOAuthCompleteWithHttpInfo(code, state);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Завершение авторизации в Таланте Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<InlineObject> TalentOAuthCompleteWithHttpInfo(string code, Guid state, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'code' when calling ApplicationApi->TalentOAuthComplete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));

            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthComplete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineObject>("/talent-oauth/complete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Завершение авторизации в Таланте Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject</returns>
        public async System.Threading.Tasks.Task<InlineObject> TalentOAuthCompleteAsync(string code, Guid state, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InlineObject> localVarResponse = await TalentOAuthCompleteWithHttpInfoAsync(code, state, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Завершение авторизации в Таланте Эндпоинт завершения авторизации Берлоги и перенаправление в приложение.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"></param>
        /// <param name="state"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineObject>> TalentOAuthCompleteWithHttpInfoAsync(string code, Guid state, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'code' when calling ApplicationApi->TalentOAuthComplete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "state", state));

            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthComplete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineObject>("/talent-oauth/complete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthComplete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Перенаправление на авторизацию Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineObject</returns>
        public InlineObject TalentOAuthConnect(string? redirectUri = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InlineObject> localVarResponse = TalentOAuthConnectWithHttpInfo(redirectUri);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Перенаправление на авторизацию Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineObject</returns>
        public Org.OpenAPITools.Client.ApiResponse<InlineObject> TalentOAuthConnectWithHttpInfo(string? redirectUri = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (redirectUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            }

            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthConnect";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineObject>("/talent-oauth/connect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthConnect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Перенаправление на авторизацию Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineObject</returns>
        public async System.Threading.Tasks.Task<InlineObject> TalentOAuthConnectAsync(string? redirectUri = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InlineObject> localVarResponse = await TalentOAuthConnectWithHttpInfoAsync(redirectUri, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Перенаправление на авторизацию Перенаправление на клиентский эндпонит OAuth авторизации Берлоги в Таланте.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectUri">URI перенаправления пользователя после авторизации Берлоги в Таланте. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineObject)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InlineObject>> TalentOAuthConnectWithHttpInfoAsync(string? redirectUri = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (redirectUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            }

            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthConnect";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineObject>("/talent-oauth/connect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthConnect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отсоединение учетной записи Таланта Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TalentOAuthDisconnect(int operationIndex = 0)
        {
            TalentOAuthDisconnectWithHttpInfo();
        }

        /// <summary>
        /// Отсоединение учетной записи Таланта Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> TalentOAuthDisconnectWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthDisconnect";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/talent-oauth/disconnect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthDisconnect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отсоединение учетной записи Таланта Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TalentOAuthDisconnectAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await TalentOAuthDisconnectWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Отсоединение учетной записи Таланта Если у игрока и так (уже) нет авторизованной учетной записи Таланта, то метод вернет &#x60;204&#x60; ответ так же как при успешном отсоединении оной.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> TalentOAuthDisconnectWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ApplicationApi.TalentOAuthDisconnect";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/talent-oauth/disconnect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TalentOAuthDisconnect", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
