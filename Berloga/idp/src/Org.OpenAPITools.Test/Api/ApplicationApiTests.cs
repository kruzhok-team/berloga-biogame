/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationApiTests : IDisposable
    {
        private ApplicationApi instance;

        public ApplicationApiTests()
        {
            instance = new ApplicationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationApi
            //Assert.IsType<ApplicationApi>(instance);
        }

        /// <summary>
        /// Test ApplicationsList
        /// </summary>
        [Fact]
        public void ApplicationsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //string? isPublic = null;
            //string? orderBy = null;
            //var response = instance.ApplicationsList(offset, limit, isPublic, orderBy);
            //Assert.IsType<List<Application>>(response);
        }

        /// <summary>
        /// Test IssueToken
        /// </summary>
        [Fact]
        public void IssueTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IssueTokenRequest issueTokenRequest = null;
            //var response = instance.IssueToken(issueTokenRequest);
            //Assert.IsType<IssueToken201Response>(response);
        }

        /// <summary>
        /// Test PlayerGet
        /// </summary>
        [Fact]
        public void PlayerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid playerId = null;
            //bool? getTalentId = null;
            //bool? getPlayerIds = null;
            //var response = instance.PlayerGet(playerId, getTalentId, getPlayerIds);
            //Assert.IsType<PlayerGet200Response>(response);
        }

        /// <summary>
        /// Test PlayersCreate
        /// </summary>
        [Fact]
        public void PlayersCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PlayersCreateRequest playersCreateRequest = null;
            //var response = instance.PlayersCreate(playersCreateRequest);
            //Assert.IsType<PlayersCreate201Response>(response);
        }

        /// <summary>
        /// Test PlayersMigrate
        /// </summary>
        [Fact]
        public void PlayersMigrateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PlayersMigrateRequest playersMigrateRequest = null;
            //var response = instance.PlayersMigrate(playersMigrateRequest);
            //Assert.IsType<PlayersMigrate200Response>(response);
        }

        /// <summary>
        /// Test TalentOAuthComplete
        /// </summary>
        [Fact]
        public void TalentOAuthCompleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //Guid state = null;
            //var response = instance.TalentOAuthComplete(code, state);
            //Assert.IsType<InlineObject>(response);
        }

        /// <summary>
        /// Test TalentOAuthConnect
        /// </summary>
        [Fact]
        public void TalentOAuthConnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? redirectUri = null;
            //var response = instance.TalentOAuthConnect(redirectUri);
            //Assert.IsType<InlineObject>(response);
        }

        /// <summary>
        /// Test TalentOAuthDisconnect
        /// </summary>
        [Fact]
        public void TalentOAuthDisconnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.TalentOAuthDisconnect();
        }
    }
}
