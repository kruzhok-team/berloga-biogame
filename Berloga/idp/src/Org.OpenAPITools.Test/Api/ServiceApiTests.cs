/*
 * Провайдер учетных данных Берлоги
 *
 * Провайдер учетных данных для мобильных игр Берлоги. Предназначен для использования как мобильными приложениями, так и другими сервисами Берлоги. Для определения какому потребителю предназначена операция, нужно обратить внимание на её тэги.  # Changelog  ### 0.4 Для [TalentOAuthConnect](#operation/TalentOAuthConnect) добавлен опциональный параметр `redirect_uri`.  ### 0.3 Для [TalentUserPlayers](#operation/TalentUserPlayers) добавлена поддержка TalentOAuth.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ServiceApiTests : IDisposable
    {
        private ServiceApi instance;

        public ServiceApiTests()
        {
            instance = new ServiceApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ServiceApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ServiceApi
            //Assert.IsType<ServiceApi>(instance);
        }

        /// <summary>
        /// Test PlayerGet
        /// </summary>
        [Fact]
        public void PlayerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid playerId = null;
            //bool? getTalentId = null;
            //bool? getPlayerIds = null;
            //var response = instance.PlayerGet(playerId, getTalentId, getPlayerIds);
            //Assert.IsType<PlayerGet200Response>(response);
        }

        /// <summary>
        /// Test TalentUserPlayers
        /// </summary>
        [Fact]
        public void TalentUserPlayersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int talentId = null;
            //var response = instance.TalentUserPlayers(talentId);
            //Assert.IsType<List<Guid>>(response);
        }

        /// <summary>
        /// Test TalentUserTokenGet
        /// </summary>
        [Fact]
        public void TalentUserTokenGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int talentId = null;
            //var response = instance.TalentUserTokenGet(talentId);
            //Assert.IsType<string>(response);
        }
    }
}
