/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
    /// <summary>
    ///  Class for testing Progress
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ProgressTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Progress
        //private Progress instance;

        public ProgressTests()
        {
            // TODO uncomment below to create an instance of Progress
            //instance = new Progress();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Progress
        /// </summary>
        [Fact]
        public void ProgressInstanceTest()
        {
            // TODO uncomment below to test "IsType" Progress
            //Assert.IsType<Progress>(instance);
        }

        /// <summary>
        /// Test the property 'TraditionId'
        /// </summary>
        [Fact]
        public void TraditionIdTest()
        {
            // TODO unit test for the property 'TraditionId'
        }

        /// <summary>
        /// Test the property 'InstrumentId'
        /// </summary>
        [Fact]
        public void InstrumentIdTest()
        {
            // TODO unit test for the property 'InstrumentId'
        }

        /// <summary>
        /// Test the property 'Scores'
        /// </summary>
        [Fact]
        public void ScoresTest()
        {
            // TODO unit test for the property 'Scores'
        }

        /// <summary>
        /// Test the property 'AwardLevel'
        /// </summary>
        [Fact]
        public void AwardLevelTest()
        {
            // TODO unit test for the property 'AwardLevel'
        }
    }
}
