/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing AdminApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AdminApiTests : IDisposable
    {
        private AdminApi instance;

        public AdminApiTests()
        {
            instance = new AdminApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AdminApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AdminApi
            //Assert.IsType<AdminApi>(instance);
        }

        /// <summary>
        /// Test InstrumentCreate
        /// </summary>
        [Fact]
        public void InstrumentCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InstrumentCreateRequest instrumentCreateRequest = null;
            //var response = instance.InstrumentCreate(instrumentCreateRequest);
            //Assert.IsType<Instrument>(response);
        }

        /// <summary>
        /// Test InstrumentRead
        /// </summary>
        [Fact]
        public void InstrumentReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int instrumentId = null;
            //var response = instance.InstrumentRead(instrumentId);
            //Assert.IsType<Instrument>(response);
        }

        /// <summary>
        /// Test InstrumentUpdate
        /// </summary>
        [Fact]
        public void InstrumentUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int instrumentId = null;
            //InstrumentUpdateRequest instrumentUpdateRequest = null;
            //var response = instance.InstrumentUpdate(instrumentId, instrumentUpdateRequest);
            //Assert.IsType<Instrument>(response);
        }

        /// <summary>
        /// Test InstrumentsList
        /// </summary>
        [Fact]
        public void InstrumentsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? after = null;
            //int? offset = null;
            //int? limit = null;
            //string? isActive = null;
            //List<int>? id = null;
            //List<int>? tId = null;
            //List<int>? cId = null;
            //string? name = null;
            //string? orderBy = null;
            //var response = instance.InstrumentsList(after, offset, limit, isActive, id, tId, cId, name, orderBy);
            //Assert.IsType<List<Instrument>>(response);
        }

        /// <summary>
        /// Test TraditionCreate
        /// </summary>
        [Fact]
        public void TraditionCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TraditionCreateRequest traditionCreateRequest = null;
            //var response = instance.TraditionCreate(traditionCreateRequest);
            //Assert.IsType<Tradition>(response);
        }

        /// <summary>
        /// Test TraditionRead
        /// </summary>
        [Fact]
        public void TraditionReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int traditionId = null;
            //var response = instance.TraditionRead(traditionId);
            //Assert.IsType<Tradition>(response);
        }

        /// <summary>
        /// Test TraditionUpdate
        /// </summary>
        [Fact]
        public void TraditionUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int traditionId = null;
            //TraditionUpdateRequest traditionUpdateRequest = null;
            //var response = instance.TraditionUpdate(traditionId, traditionUpdateRequest);
            //Assert.IsType<Tradition>(response);
        }

        /// <summary>
        /// Test TraditionsList
        /// </summary>
        [Fact]
        public void TraditionsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //string? isActive = null;
            //var response = instance.TraditionsList(name, isActive);
            //Assert.IsType<List<Tradition>>(response);
        }
    }
}
