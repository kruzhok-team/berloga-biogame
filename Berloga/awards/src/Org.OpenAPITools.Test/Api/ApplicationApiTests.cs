/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ApplicationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ApplicationApiTests : IDisposable
    {
        private ApplicationApi instance;

        public ApplicationApiTests()
        {
            instance = new ApplicationApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ApplicationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ApplicationApi
            //Assert.IsType<ApplicationApi>(instance);
        }

        /// <summary>
        /// Test AwardsList
        /// </summary>
        [Fact]
        public void AwardsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //int? traditionId = null;
            //int? instrumentId = null;
            //string? orderBy = null;
            //bool? withApplications = null;
            //var response = instance.AwardsList(offset, limit, traditionId, instrumentId, orderBy, withApplications);
            //Assert.IsType<List<AwardsList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test ChallengesList
        /// </summary>
        [Fact]
        public void ChallengesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ChallengesList(offset, limit);
            //Assert.IsType<List<ChallengesList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test InstrumentsList
        /// </summary>
        [Fact]
        public void InstrumentsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? after = null;
            //int? offset = null;
            //int? limit = null;
            //string? isActive = null;
            //List<int>? id = null;
            //List<int>? tId = null;
            //List<int>? cId = null;
            //string? name = null;
            //string? orderBy = null;
            //var response = instance.InstrumentsList(after, offset, limit, isActive, id, tId, cId, name, orderBy);
            //Assert.IsType<List<Instrument>>(response);
        }

        /// <summary>
        /// Test PassedChallengesList
        /// </summary>
        [Fact]
        public void PassedChallengesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? playerId = null;
            //int? talentId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.PassedChallengesList(playerId, talentId, offset, limit);
            //Assert.IsType<List<PassedChallengesList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test TraditionInstrumentsList
        /// </summary>
        [Fact]
        public void TraditionInstrumentsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int traditionId = null;
            //var response = instance.TraditionInstrumentsList(traditionId);
            //Assert.IsType<List<Instrument>>(response);
        }

        /// <summary>
        /// Test TraditionsList
        /// </summary>
        [Fact]
        public void TraditionsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? name = null;
            //string? isActive = null;
            //var response = instance.TraditionsList(name, isActive);
            //Assert.IsType<List<Tradition>>(response);
        }

        /// <summary>
        /// Test UserAwardDisplayed
        /// </summary>
        [Fact]
        public void UserAwardDisplayedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int awardId = null;
            //instance.UserAwardDisplayed(awardId);
        }

        /// <summary>
        /// Test UserAwardsList
        /// </summary>
        [Fact]
        public void UserAwardsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.UserAwardsList(offset, limit);
            //Assert.IsType<List<UserAwardsList200ResponseInner>>(response);
        }

        /// <summary>
        /// Test UserProgressList
        /// </summary>
        [Fact]
        public void UserProgressListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //bool? traditionsOnly = null;
            //int? traditionInstruments = null;
            //List<int>? traditionIds = null;
            //List<int>? instrumentIds = null;
            //string? orderBy = null;
            //var response = instance.UserProgressList(offset, limit, traditionsOnly, traditionInstruments, traditionIds, instrumentIds, orderBy);
            //Assert.IsType<List<Progress>>(response);
        }
    }
}
