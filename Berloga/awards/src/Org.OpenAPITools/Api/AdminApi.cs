/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Добавление инструмента
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        Instrument InstrumentCreate(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Добавление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        ApiResponse<Instrument> InstrumentCreateWithHttpInfo(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Инструмент
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        Instrument InstrumentRead(int instrumentId, int operationIndex = 0);

        /// <summary>
        /// Инструмент
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        ApiResponse<Instrument> InstrumentReadWithHttpInfo(int instrumentId, int operationIndex = 0);
        /// <summary>
        /// Обновление инструмента
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        Instrument InstrumentUpdate(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Обновление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        ApiResponse<Instrument> InstrumentUpdateWithHttpInfo(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        List<Instrument> InstrumentsList(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        ApiResponse<List<Instrument>> InstrumentsListWithHttpInfo(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// Добавление традиции
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        Tradition TraditionCreate(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0);

        /// <summary>
        /// Добавление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        ApiResponse<Tradition> TraditionCreateWithHttpInfo(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0);
        /// <summary>
        /// Традиция
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        Tradition TraditionRead(int traditionId, int operationIndex = 0);

        /// <summary>
        /// Традиция
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        ApiResponse<Tradition> TraditionReadWithHttpInfo(int traditionId, int operationIndex = 0);
        /// <summary>
        /// Обновление традиции
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        Tradition TraditionUpdate(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// Обновление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        ApiResponse<Tradition> TraditionUpdateWithHttpInfo(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// Список традиций
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Tradition&gt;</returns>
        List<Tradition> TraditionsList(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Tradition&gt;</returns>
        ApiResponse<List<Tradition>> TraditionsListWithHttpInfo(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Добавление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        System.Threading.Tasks.Task<Instrument> InstrumentCreateAsync(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Добавление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Instrument>> InstrumentCreateWithHttpInfoAsync(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Инструмент
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        System.Threading.Tasks.Task<Instrument> InstrumentReadAsync(int instrumentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Инструмент
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Instrument>> InstrumentReadWithHttpInfoAsync(int instrumentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Обновление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        System.Threading.Tasks.Task<Instrument> InstrumentUpdateAsync(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Обновление инструмента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        System.Threading.Tasks.Task<ApiResponse<Instrument>> InstrumentUpdateWithHttpInfoAsync(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        System.Threading.Tasks.Task<List<Instrument>> InstrumentsListAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Instrument>>> InstrumentsListWithHttpInfoAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Добавление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        System.Threading.Tasks.Task<Tradition> TraditionCreateAsync(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Добавление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tradition>> TraditionCreateWithHttpInfoAsync(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Традиция
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        System.Threading.Tasks.Task<Tradition> TraditionReadAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Традиция
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tradition>> TraditionReadWithHttpInfoAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Обновление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        System.Threading.Tasks.Task<Tradition> TraditionUpdateAsync(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Обновление традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tradition>> TraditionUpdateWithHttpInfoAsync(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tradition&gt;</returns>
        System.Threading.Tasks.Task<List<Tradition>> TraditionsListAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tradition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tradition>>> TraditionsListWithHttpInfoAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IAdminApiSync, IAdminApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AdminApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Добавление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        public Instrument InstrumentCreate(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = InstrumentCreateWithHttpInfo(instrumentCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        public Org.OpenAPITools.Client.ApiResponse<Instrument> InstrumentCreateWithHttpInfo(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'instrumentCreateRequest' is set
            if (instrumentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrumentCreateRequest' when calling AdminApi->InstrumentCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = instrumentCreateRequest;

            localVarRequestOptions.Operation = "AdminApi.InstrumentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Instrument>("/instruments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Добавление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        public async System.Threading.Tasks.Task<Instrument> InstrumentCreateAsync(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = await InstrumentCreateWithHttpInfoAsync(instrumentCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Instrument>> InstrumentCreateWithHttpInfoAsync(InstrumentCreateRequest instrumentCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instrumentCreateRequest' is set
            if (instrumentCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrumentCreateRequest' when calling AdminApi->InstrumentCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = instrumentCreateRequest;

            localVarRequestOptions.Operation = "AdminApi.InstrumentCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Instrument>("/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Инструмент 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        public Instrument InstrumentRead(int instrumentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = InstrumentReadWithHttpInfo(instrumentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Инструмент 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        public Org.OpenAPITools.Client.ApiResponse<Instrument> InstrumentReadWithHttpInfo(int instrumentId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrument_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.InstrumentRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Instrument>("/instruments/{instrument_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Инструмент 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        public async System.Threading.Tasks.Task<Instrument> InstrumentReadAsync(int instrumentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = await InstrumentReadWithHttpInfoAsync(instrumentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Инструмент 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Instrument>> InstrumentReadWithHttpInfoAsync(int instrumentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrument_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.InstrumentRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Instrument>("/instruments/{instrument_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Обновление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Instrument</returns>
        public Instrument InstrumentUpdate(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = InstrumentUpdateWithHttpInfo(instrumentId, instrumentUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Обновление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Instrument</returns>
        public Org.OpenAPITools.Client.ApiResponse<Instrument> InstrumentUpdateWithHttpInfo(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'instrumentUpdateRequest' is set
            if (instrumentUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrumentUpdateRequest' when calling AdminApi->InstrumentUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrument_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.Data = instrumentUpdateRequest;

            localVarRequestOptions.Operation = "AdminApi.InstrumentUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Instrument>("/instruments/{instrument_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Обновление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Instrument</returns>
        public async System.Threading.Tasks.Task<Instrument> InstrumentUpdateAsync(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Instrument> localVarResponse = await InstrumentUpdateWithHttpInfoAsync(instrumentId, instrumentUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Обновление инструмента 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instrumentId">Идентификатор инструмента в адресе.</param>
        /// <param name="instrumentUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Instrument)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Instrument>> InstrumentUpdateWithHttpInfoAsync(int instrumentId, InstrumentUpdateRequest instrumentUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instrumentUpdateRequest' is set
            if (instrumentUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'instrumentUpdateRequest' when calling AdminApi->InstrumentUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instrument_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(instrumentId)); // path parameter
            localVarRequestOptions.Data = instrumentUpdateRequest;

            localVarRequestOptions.Operation = "AdminApi.InstrumentUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Instrument>("/instruments/{instrument_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        public List<Instrument> InstrumentsList(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = InstrumentsListWithHttpInfo(after, offset, limit, isActive, id, tId, cId, name, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Instrument>> InstrumentsListWithHttpInfo(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (cId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "c_id", cId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "AdminApi.InstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Instrument>>("/instruments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        public async System.Threading.Tasks.Task<List<Instrument>> InstrumentsListAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = await InstrumentsListWithHttpInfoAsync(after, offset, limit, isActive, id, tId, cId, name, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Instrument>>> InstrumentsListWithHttpInfoAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (cId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "c_id", cId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "AdminApi.InstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Instrument>>("/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Добавление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        public Tradition TraditionCreate(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = TraditionCreateWithHttpInfo(traditionCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        public Org.OpenAPITools.Client.ApiResponse<Tradition> TraditionCreateWithHttpInfo(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'traditionCreateRequest' is set
            if (traditionCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'traditionCreateRequest' when calling AdminApi->TraditionCreate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = traditionCreateRequest;

            localVarRequestOptions.Operation = "AdminApi.TraditionCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Tradition>("/traditions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Добавление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        public async System.Threading.Tasks.Task<Tradition> TraditionCreateAsync(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = await TraditionCreateWithHttpInfoAsync(traditionCreateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionCreateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Tradition>> TraditionCreateWithHttpInfoAsync(TraditionCreateRequest traditionCreateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'traditionCreateRequest' is set
            if (traditionCreateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'traditionCreateRequest' when calling AdminApi->TraditionCreate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = traditionCreateRequest;

            localVarRequestOptions.Operation = "AdminApi.TraditionCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Tradition>("/traditions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Традиция 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        public Tradition TraditionRead(int traditionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = TraditionReadWithHttpInfo(traditionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Традиция 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        public Org.OpenAPITools.Client.ApiResponse<Tradition> TraditionReadWithHttpInfo(int traditionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.TraditionRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Tradition>("/traditions/{tradition_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Традиция 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        public async System.Threading.Tasks.Task<Tradition> TraditionReadAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = await TraditionReadWithHttpInfoAsync(traditionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Традиция 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Tradition>> TraditionReadWithHttpInfoAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter

            localVarRequestOptions.Operation = "AdminApi.TraditionRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Tradition>("/traditions/{tradition_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Обновление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Tradition</returns>
        public Tradition TraditionUpdate(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = TraditionUpdateWithHttpInfo(traditionId, traditionUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Обновление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Tradition</returns>
        public Org.OpenAPITools.Client.ApiResponse<Tradition> TraditionUpdateWithHttpInfo(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'traditionUpdateRequest' is set
            if (traditionUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'traditionUpdateRequest' when calling AdminApi->TraditionUpdate");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter
            localVarRequestOptions.Data = traditionUpdateRequest;

            localVarRequestOptions.Operation = "AdminApi.TraditionUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Tradition>("/traditions/{tradition_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Обновление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tradition</returns>
        public async System.Threading.Tasks.Task<Tradition> TraditionUpdateAsync(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Tradition> localVarResponse = await TraditionUpdateWithHttpInfoAsync(traditionId, traditionUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Обновление традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="traditionUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tradition)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Tradition>> TraditionUpdateWithHttpInfoAsync(int traditionId, TraditionUpdateRequest traditionUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'traditionUpdateRequest' is set
            if (traditionUpdateRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'traditionUpdateRequest' when calling AdminApi->TraditionUpdate");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter
            localVarRequestOptions.Data = traditionUpdateRequest;

            localVarRequestOptions.Operation = "AdminApi.TraditionUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Tradition>("/traditions/{tradition_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Tradition&gt;</returns>
        public List<Tradition> TraditionsList(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Tradition>> localVarResponse = TraditionsListWithHttpInfo(name, isActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Tradition&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Tradition>> TraditionsListWithHttpInfo(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }

            localVarRequestOptions.Operation = "AdminApi.TraditionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Tradition>>("/traditions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tradition&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tradition>> TraditionsListAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Tradition>> localVarResponse = await TraditionsListWithHttpInfoAsync(name, isActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tradition&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Tradition>>> TraditionsListWithHttpInfoAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }

            localVarRequestOptions.Operation = "AdminApi.TraditionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tradition>>("/traditions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
