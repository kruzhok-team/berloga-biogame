/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Список наград
        /// </summary>
        /// <remarks>
        /// Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AwardsList200ResponseInner&gt;</returns>
        List<AwardsList200ResponseInner> AwardsList(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Список наград
        /// </summary>
        /// <remarks>
        /// Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AwardsList200ResponseInner&gt;</returns>
        ApiResponse<List<AwardsList200ResponseInner>> AwardsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Список испытаний
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChallengesList200ResponseInner&gt;</returns>
        List<ChallengesList200ResponseInner> ChallengesList(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Список испытаний
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChallengesList200ResponseInner&gt;</returns>
        ApiResponse<List<ChallengesList200ResponseInner>> ChallengesListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        List<Instrument> InstrumentsList(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        ApiResponse<List<Instrument>> InstrumentsListWithHttpInfo(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// Список пройденных испытаний
        /// </summary>
        /// <remarks>
        /// Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        List<PassedChallengesList200ResponseInner> PassedChallengesList(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Список пройденных испытаний
        /// </summary>
        /// <remarks>
        /// Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        ApiResponse<List<PassedChallengesList200ResponseInner>> PassedChallengesListWithHttpInfo(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Список инструментов традиции
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        List<Instrument> TraditionInstrumentsList(int traditionId, int operationIndex = 0);

        /// <summary>
        /// Список инструментов традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        ApiResponse<List<Instrument>> TraditionInstrumentsListWithHttpInfo(int traditionId, int operationIndex = 0);
        /// <summary>
        /// Список традиций
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Tradition&gt;</returns>
        List<Tradition> TraditionsList(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Tradition&gt;</returns>
        ApiResponse<List<Tradition>> TraditionsListWithHttpInfo(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0);
        /// <summary>
        /// Отметка награды продемонстрированной
        /// </summary>
        /// <remarks>
        /// Отметка награды как продемонстрированной пользователю в приложении.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UserAwardDisplayed(int awardId, int operationIndex = 0);

        /// <summary>
        /// Отметка награды продемонстрированной
        /// </summary>
        /// <remarks>
        /// Отметка награды как продемонстрированной пользователю в приложении.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UserAwardDisplayedWithHttpInfo(int awardId, int operationIndex = 0);
        /// <summary>
        /// Список наград пользователя
        /// </summary>
        /// <remarks>
        /// Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserAwardsList200ResponseInner&gt;</returns>
        List<UserAwardsList200ResponseInner> UserAwardsList(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Список наград пользователя
        /// </summary>
        /// <remarks>
        /// Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserAwardsList200ResponseInner&gt;</returns>
        ApiResponse<List<UserAwardsList200ResponseInner>> UserAwardsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Прогресс пользователя
        /// </summary>
        /// <remarks>
        /// Прогресс пользователя по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Progress&gt;</returns>
        List<Progress> UserProgressList(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// Прогресс пользователя
        /// </summary>
        /// <remarks>
        /// Прогресс пользователя по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Progress&gt;</returns>
        ApiResponse<List<Progress>> UserProgressListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Список наград
        /// </summary>
        /// <remarks>
        /// Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AwardsList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<AwardsList200ResponseInner>> AwardsListAsync(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список наград
        /// </summary>
        /// <remarks>
        /// Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AwardsList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AwardsList200ResponseInner>>> AwardsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список испытаний
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChallengesList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<ChallengesList200ResponseInner>> ChallengesListAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список испытаний
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengesList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChallengesList200ResponseInner>>> ChallengesListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        System.Threading.Tasks.Task<List<Instrument>> InstrumentsListAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список инструментов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Instrument>>> InstrumentsListWithHttpInfoAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список пройденных испытаний
        /// </summary>
        /// <remarks>
        /// Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<PassedChallengesList200ResponseInner>> PassedChallengesListAsync(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список пройденных испытаний
        /// </summary>
        /// <remarks>
        /// Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PassedChallengesList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PassedChallengesList200ResponseInner>>> PassedChallengesListWithHttpInfoAsync(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список инструментов традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        System.Threading.Tasks.Task<List<Instrument>> TraditionInstrumentsListAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список инструментов традиции
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Instrument>>> TraditionInstrumentsListWithHttpInfoAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tradition&gt;</returns>
        System.Threading.Tasks.Task<List<Tradition>> TraditionsListAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список традиций
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tradition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Tradition>>> TraditionsListWithHttpInfoAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Отметка награды продемонстрированной
        /// </summary>
        /// <remarks>
        /// Отметка награды как продемонстрированной пользователю в приложении.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UserAwardDisplayedAsync(int awardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Отметка награды продемонстрированной
        /// </summary>
        /// <remarks>
        /// Отметка награды как продемонстрированной пользователю в приложении.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UserAwardDisplayedWithHttpInfoAsync(int awardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список наград пользователя
        /// </summary>
        /// <remarks>
        /// Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserAwardsList200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<UserAwardsList200ResponseInner>> UserAwardsListAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список наград пользователя
        /// </summary>
        /// <remarks>
        /// Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserAwardsList200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAwardsList200ResponseInner>>> UserAwardsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Прогресс пользователя
        /// </summary>
        /// <remarks>
        /// Прогресс пользователя по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Progress&gt;</returns>
        System.Threading.Tasks.Task<List<Progress>> UserProgressListAsync(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Прогресс пользователя
        /// </summary>
        /// <remarks>
        /// Прогресс пользователя по традициям и инструментам.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Progress&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Progress>>> UserProgressListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IApplicationApi : IApplicationApiSync, IApplicationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ApplicationApi : IApplicationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ApplicationApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ApplicationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ApplicationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Список наград Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;AwardsList200ResponseInner&gt;</returns>
        public List<AwardsList200ResponseInner> AwardsList(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<AwardsList200ResponseInner>> localVarResponse = AwardsListWithHttpInfo(offset, limit, traditionId, instrumentId, orderBy, withApplications);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список наград Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;AwardsList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<AwardsList200ResponseInner>> AwardsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (instrumentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument_id", instrumentId));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (withApplications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "with_applications", withApplications));
            }

            localVarRequestOptions.Operation = "ApplicationApi.AwardsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AwardsList200ResponseInner>>("/awards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwardsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список наград Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AwardsList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<AwardsList200ResponseInner>> AwardsListAsync(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<AwardsList200ResponseInner>> localVarResponse = await AwardsListWithHttpInfoAsync(offset, limit, traditionId, instrumentId, orderBy, withApplications, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список наград Список наград, выдаваемых за достижение уровеней по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionId">Фильтрация по ID традиции. (optional)</param>
        /// <param name="instrumentId">Фильтрация по ID инструмента. (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to award_level)</param>
        /// <param name="withApplications">Включить в ответ свойство &#x60;applications&#x60;. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AwardsList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<AwardsList200ResponseInner>>> AwardsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int? traditionId = default(int?), int? instrumentId = default(int?), string? orderBy = default(string?), bool? withApplications = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (traditionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_id", traditionId));
            }
            if (instrumentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "instrument_id", instrumentId));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (withApplications != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "with_applications", withApplications));
            }

            localVarRequestOptions.Operation = "ApplicationApi.AwardsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AwardsList200ResponseInner>>("/awards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AwardsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список испытаний 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ChallengesList200ResponseInner&gt;</returns>
        public List<ChallengesList200ResponseInner> ChallengesList(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<ChallengesList200ResponseInner>> localVarResponse = ChallengesListWithHttpInfo(offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список испытаний 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ChallengesList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<ChallengesList200ResponseInner>> ChallengesListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ChallengesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ChallengesList200ResponseInner>>("/challenges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChallengesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список испытаний 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ChallengesList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChallengesList200ResponseInner>> ChallengesListAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<ChallengesList200ResponseInner>> localVarResponse = await ChallengesListWithHttpInfoAsync(offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список испытаний 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ChallengesList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<ChallengesList200ResponseInner>>> ChallengesListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.ChallengesList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ChallengesList200ResponseInner>>("/challenges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChallengesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        public List<Instrument> InstrumentsList(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = InstrumentsListWithHttpInfo(after, offset, limit, isActive, id, tId, cId, name, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Instrument>> InstrumentsListWithHttpInfo(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (cId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "c_id", cId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.InstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Instrument>>("/instruments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        public async System.Threading.Tasks.Task<List<Instrument>> InstrumentsListAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = await InstrumentsListWithHttpInfoAsync(after, offset, limit, isActive, id, tId, cId, name, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Пропуск объектов с идентификатором равном или менее указанного. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="id">Идентификаторы инструментов. (optional)</param>
        /// <param name="tId">Фильтрация по ID традиций. (optional)</param>
        /// <param name="cId">Фильтрация по ID компетенций. (optional)</param>
        /// <param name="name">Фильтрация по названию инструмента. (optional)</param>
        /// <param name="orderBy">Очереднось выдачи. (optional, default to id_asc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Instrument>>> InstrumentsListWithHttpInfoAsync(long? after = default(long?), int? offset = default(int?), int? limit = default(int?), string? isActive = default(string?), List<int>? id = default(List<int>?), List<int>? tId = default(List<int>?), List<int>? cId = default(List<int>?), string? name = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (tId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "t_id", tId));
            }
            if (cId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "c_id", cId));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.InstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Instrument>>("/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список пройденных испытаний Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        public List<PassedChallengesList200ResponseInner> PassedChallengesList(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<PassedChallengesList200ResponseInner>> localVarResponse = PassedChallengesListWithHttpInfo(playerId, talentId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список пройденных испытаний Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<PassedChallengesList200ResponseInner>> PassedChallengesListWithHttpInfo(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (talentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "talent_id", talentId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.PassedChallengesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PassedChallengesList200ResponseInner>>("/challenges/passed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PassedChallengesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список пройденных испытаний Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PassedChallengesList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<PassedChallengesList200ResponseInner>> PassedChallengesListAsync(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<PassedChallengesList200ResponseInner>> localVarResponse = await PassedChallengesListWithHttpInfoAsync(playerId, talentId, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список пройденных испытаний Параметры &#x60;player_id&#x60; и &#x60;talent_id&#x60; взаимоисключаемы. При аутентификации токеном &#x60;TalentOAuth&#x60;, предустанавливается параметр &#x60;talent_id&#x60;. При аутентификации токеном &#x60;BerlogaJWT&#x60;, предустанавливается параметр &#x60;player_id&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Испытания пройденные игроками, объединенными пользователем, привязанным к указанному игроку. При отсутствии привязанного пользователя, возвращаются испытания указанного игрока. (optional)</param>
        /// <param name="talentId">Испытания пройденные игроками указанного пользователя. (optional)</param>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PassedChallengesList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<PassedChallengesList200ResponseInner>>> PassedChallengesListWithHttpInfoAsync(Guid? playerId = default(Guid?), int? talentId = default(int?), int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (playerId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "player_id", playerId));
            }
            if (talentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "talent_id", talentId));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.PassedChallengesList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PassedChallengesList200ResponseInner>>("/challenges/passed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PassedChallengesList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Instrument&gt;</returns>
        public List<Instrument> TraditionInstrumentsList(int traditionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = TraditionInstrumentsListWithHttpInfo(traditionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Instrument&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Instrument>> TraditionInstrumentsListWithHttpInfo(int traditionId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.TraditionInstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Instrument>>("/traditions/{tradition_id}/instruments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionInstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список инструментов традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Instrument&gt;</returns>
        public async System.Threading.Tasks.Task<List<Instrument>> TraditionInstrumentsListAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Instrument>> localVarResponse = await TraditionInstrumentsListWithHttpInfoAsync(traditionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список инструментов традиции 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="traditionId">Идентификатор традиции в адресе.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Instrument&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Instrument>>> TraditionInstrumentsListWithHttpInfoAsync(int traditionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tradition_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(traditionId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.TraditionInstrumentsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Instrument>>("/traditions/{tradition_id}/instruments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionInstrumentsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Tradition&gt;</returns>
        public List<Tradition> TraditionsList(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Tradition>> localVarResponse = TraditionsListWithHttpInfo(name, isActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Tradition&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Tradition>> TraditionsListWithHttpInfo(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }

            localVarRequestOptions.Operation = "ApplicationApi.TraditionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Tradition>>("/traditions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Tradition&gt;</returns>
        public async System.Threading.Tasks.Task<List<Tradition>> TraditionsListAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Tradition>> localVarResponse = await TraditionsListWithHttpInfoAsync(name, isActive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список традиций 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Фильтрация по названию традиции. (optional)</param>
        /// <param name="isActive">Фильтрация по признаку активности объектов выборки. По умолчанию возвращаются только активные. (optional, default to true)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Tradition&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Tradition>>> TraditionsListWithHttpInfoAsync(string? name = default(string?), string? isActive = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (isActive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "is_active", isActive));
            }

            localVarRequestOptions.Operation = "ApplicationApi.TraditionsList";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Tradition>>("/traditions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TraditionsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отметка награды продемонстрированной Отметка награды как продемонстрированной пользователю в приложении.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UserAwardDisplayed(int awardId, int operationIndex = 0)
        {
            UserAwardDisplayedWithHttpInfo(awardId);
        }

        /// <summary>
        /// Отметка награды продемонстрированной Отметка награды как продемонстрированной пользователю в приложении.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> UserAwardDisplayedWithHttpInfo(int awardId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("award_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(awardId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.UserAwardDisplayed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/user-awards/{award_id}/displayed", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAwardDisplayed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отметка награды продемонстрированной Отметка награды как продемонстрированной пользователю в приложении.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UserAwardDisplayedAsync(int awardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UserAwardDisplayedWithHttpInfoAsync(awardId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Отметка награды продемонстрированной Отметка награды как продемонстрированной пользователю в приложении.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="awardId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> UserAwardDisplayedWithHttpInfoAsync(int awardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("award_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(awardId)); // path parameter

            localVarRequestOptions.Operation = "ApplicationApi.UserAwardDisplayed";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/user-awards/{award_id}/displayed", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAwardDisplayed", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список наград пользователя Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UserAwardsList200ResponseInner&gt;</returns>
        public List<UserAwardsList200ResponseInner> UserAwardsList(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserAwardsList200ResponseInner>> localVarResponse = UserAwardsListWithHttpInfo(offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список наград пользователя Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UserAwardsList200ResponseInner&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<UserAwardsList200ResponseInner>> UserAwardsListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.UserAwardsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserAwardsList200ResponseInner>>("/user-awards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAwardsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список наград пользователя Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserAwardsList200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAwardsList200ResponseInner>> UserAwardsListAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<UserAwardsList200ResponseInner>> localVarResponse = await UserAwardsListWithHttpInfoAsync(offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список наград пользователя Формат возвращаемых объектов в массиве зависит от типа используемой авторизации. Для &#x60;BerlogaJWT&#x60; возращаются &#x60;PlayerAward&#x60;, для &#x60;TalentOAuth&#x60; - &#x60;TalentUserAward&#x60;.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserAwardsList200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<UserAwardsList200ResponseInner>>> UserAwardsListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ApplicationApi.UserAwardsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserAwardsList200ResponseInner>>("/user-awards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserAwardsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Прогресс пользователя Прогресс пользователя по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Progress&gt;</returns>
        public List<Progress> UserProgressList(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Progress>> localVarResponse = UserProgressListWithHttpInfo(offset, limit, traditionsOnly, traditionInstruments, traditionIds, instrumentIds, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Прогресс пользователя Прогресс пользователя по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Progress&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Progress>> UserProgressListWithHttpInfo(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (traditionsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "traditions_only", traditionsOnly));
            }
            if (traditionInstruments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_instruments", traditionInstruments));
            }
            if (traditionIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tradition_ids", traditionIds));
            }
            if (instrumentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "instrument_ids", instrumentIds));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.UserProgressList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Progress>>("/user-progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProgressList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Прогресс пользователя Прогресс пользователя по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Progress&gt;</returns>
        public async System.Threading.Tasks.Task<List<Progress>> UserProgressListAsync(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Progress>> localVarResponse = await UserProgressListWithHttpInfoAsync(offset, limit, traditionsOnly, traditionInstruments, traditionIds, instrumentIds, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Прогресс пользователя Прогресс пользователя по традициям и инструментам.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Кол-во объектов выборки для пропуска. (optional, default to 0)</param>
        /// <param name="limit">Максимум объектов возвращаемых в теле ответа. (optional, default to 20)</param>
        /// <param name="traditionsOnly">Прогресс только по традициям (optional, default to false)</param>
        /// <param name="traditionInstruments">Прогресс по инструментам традиции (optional)</param>
        /// <param name="traditionIds">Прогресс по определенным традициям (optional)</param>
        /// <param name="instrumentIds">Прогресс по определенным инструментам (optional)</param>
        /// <param name="orderBy">Порядок сортировки (optional, default to created_at_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Progress&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Progress>>> UserProgressListWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), bool? traditionsOnly = default(bool?), int? traditionInstruments = default(int?), List<int>? traditionIds = default(List<int>?), List<int>? instrumentIds = default(List<int>?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (traditionsOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "traditions_only", traditionsOnly));
            }
            if (traditionInstruments != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "tradition_instruments", traditionInstruments));
            }
            if (traditionIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "tradition_ids", traditionIds));
            }
            if (instrumentIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "instrument_ids", instrumentIds));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "ApplicationApi.UserProgressList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (BerlogaJWT) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Progress>>("/user-progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserProgressList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
