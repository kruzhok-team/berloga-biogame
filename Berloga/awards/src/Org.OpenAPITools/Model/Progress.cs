/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Прогресс пользователя по традиции или инструменту.
    /// </summary>
    [DataContract(Name = "Progress")]
    public partial class Progress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Progress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Progress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Progress" /> class.
        /// </summary>
        /// <param name="traditionId">ID традиции. (required).</param>
        /// <param name="instrumentId">ID инструмента. (required).</param>
        /// <param name="scores">Текущее кол-во баллов. (required).</param>
        /// <param name="awardLevel">Текущий уровень традиции/инструмента. (required).</param>
        public Progress(int traditionId = default(int), int instrumentId = default(int), decimal scores = default(decimal), int awardLevel = default(int))
        {
            this.TraditionId = traditionId;
            this.InstrumentId = instrumentId;
            this.Scores = scores;
            this.AwardLevel = awardLevel;
        }

        /// <summary>
        /// ID традиции.
        /// </summary>
        /// <value>ID традиции.</value>
        [DataMember(Name = "tradition_id", IsRequired = true, EmitDefaultValue = true)]
        public int TraditionId { get; set; }

        /// <summary>
        /// ID инструмента.
        /// </summary>
        /// <value>ID инструмента.</value>
        [DataMember(Name = "instrument_id", IsRequired = true, EmitDefaultValue = true)]
        public int InstrumentId { get; set; }

        /// <summary>
        /// Текущее кол-во баллов.
        /// </summary>
        /// <value>Текущее кол-во баллов.</value>
        [DataMember(Name = "scores", IsRequired = true, EmitDefaultValue = true)]
        public decimal Scores { get; set; }

        /// <summary>
        /// Текущий уровень традиции/инструмента.
        /// </summary>
        /// <value>Текущий уровень традиции/инструмента.</value>
        [DataMember(Name = "award_level", IsRequired = true, EmitDefaultValue = true)]
        public int AwardLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Progress {\n");
            sb.Append("  TraditionId: ").Append(TraditionId).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("  AwardLevel: ").Append(AwardLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
