/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TalentUserAward
    /// </summary>
    [DataContract(Name = "TalentUserAward")]
    public partial class TalentUserAward : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TalentUserAward" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TalentUserAward() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TalentUserAward" /> class.
        /// </summary>
        /// <param name="awardId">Идентификатор награды. (required).</param>
        /// <param name="awardedAt">Дата выдачи награды системой. (required).</param>
        /// <param name="displayed">Даты отображения награды в приложениях. (required).</param>
        public TalentUserAward(int awardId = default(int), DateTime awardedAt = default(DateTime), List<TalentUserAwardAllOfDisplayed> displayed = default(List<TalentUserAwardAllOfDisplayed>))
        {
            this.AwardId = awardId;
            this.AwardedAt = awardedAt;
            // to ensure "displayed" is required (not null)
            if (displayed == null)
            {
                throw new ArgumentNullException("displayed is a required property for TalentUserAward and cannot be null");
            }
            this.Displayed = displayed;
        }

        /// <summary>
        /// Идентификатор награды.
        /// </summary>
        /// <value>Идентификатор награды.</value>
        [DataMember(Name = "award_id", IsRequired = true, EmitDefaultValue = true)]
        public int AwardId { get; set; }

        /// <summary>
        /// Дата выдачи награды системой.
        /// </summary>
        /// <value>Дата выдачи награды системой.</value>
        [DataMember(Name = "awarded_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime AwardedAt { get; set; }

        /// <summary>
        /// Даты отображения награды в приложениях.
        /// </summary>
        /// <value>Даты отображения награды в приложениях.</value>
        [DataMember(Name = "displayed", IsRequired = true, EmitDefaultValue = true)]
        public List<TalentUserAwardAllOfDisplayed> Displayed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TalentUserAward {\n");
            sb.Append("  AwardId: ").Append(AwardId).Append("\n");
            sb.Append("  AwardedAt: ").Append(AwardedAt).Append("\n");
            sb.Append("  Displayed: ").Append(Displayed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
