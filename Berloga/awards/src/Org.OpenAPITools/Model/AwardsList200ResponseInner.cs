/*
 * Награды Берлоги
 *
 * Сервис наград за прогресс по традициям и инструментам Берлоги.  Фильтры в эндпоинтах со списками объектов, при указывании нескольких параметров, объединяются оператором «И». В иных случаях - это указано в описании. Так как фильтры применяются все вместе, то можно собрать комбинацию под которую не попдает ни один объект. Фильтры по традициям и инструментам нужно использовать по отдельности.  Пагинация может быть представлена как параметром `offset`, так и параметром `after`. Параметр `offset` позволяет указать кол-во объектов для пропуска из читаемой выборки. В `after` указывается идентификатор, объекты с идентификатором равном или менее указанному будут исключены из выборки.  > Предпочтительно, когда есть возможность, использовать `after`. Так же надо учитывать, что допустимое значение для `offset` имеет ограничения.  # Changelog  ### 0.4 - Добавлен [список инструментов](#operation/InstrumentsList).  ### 0.3 - Добавлен [эндпоинт чтения списка испытаний](#operation/ChallengesList). - Добавлен [эндпоинт чтения списка испытаний пройденных игроком или пользователем Таланта](#operation/PassedChallengesList).  ### 0.2 В [список наград](#operation/AwardsList) добавлено опциональное поле `applications`.
 *
 * The version of the OpenAPI document: 0.4
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AwardsList200ResponseInner
    /// </summary>
    [DataContract(Name = "AwardsList_200_response_inner")]
    public partial class AwardsList200ResponseInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AwardsList200ResponseInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AwardsList200ResponseInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AwardsList200ResponseInner" /> class.
        /// </summary>
        /// <param name="id">Идентификатор награды. (required).</param>
        /// <param name="createdAt">Дата создания (required).</param>
        /// <param name="updatedAt">Дата обновления (required).</param>
        /// <param name="traditionId">ID традиции. (required).</param>
        /// <param name="instrumentId">ID инструмента. (required).</param>
        /// <param name="awardLevel">Уровень традиции/инструмента ассоциированный с этой наградой. (required).</param>
        /// <param name="dependencyLevel">Опциональный уровень зависимой традиции/инструмента, без которого нельзя получить награду. При отсутствии зависимости, содержит &#x60;0&#x60;. (required).</param>
        /// <param name="requiredScores">Кол-во баллов необходимое для достижения &#x60;award_level&#x60; и получения этой награды. (required).</param>
        /// <param name="name">Название награды. (required).</param>
        /// <param name="description">Описание награды. (required).</param>
        /// <param name="iconUrl">URL иконки награды. (required).</param>
        /// <param name="applications">Приложения, в которых реализована награда. Возвращается только при указании параметра &#x60;with_applications&#x60;..</param>
        public AwardsList200ResponseInner(int id = default(int), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), int traditionId = default(int), int instrumentId = default(int), int awardLevel = default(int), int dependencyLevel = default(int), decimal requiredScores = default(decimal), string name = default(string), string description = default(string), string iconUrl = default(string), List<Guid> applications = default(List<Guid>))
        {
            this.Id = id;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.TraditionId = traditionId;
            this.InstrumentId = instrumentId;
            this.AwardLevel = awardLevel;
            this.DependencyLevel = dependencyLevel;
            this.RequiredScores = requiredScores;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AwardsList200ResponseInner and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for AwardsList200ResponseInner and cannot be null");
            }
            this.Description = description;
            // to ensure "iconUrl" is required (not null)
            if (iconUrl == null)
            {
                throw new ArgumentNullException("iconUrl is a required property for AwardsList200ResponseInner and cannot be null");
            }
            this.IconUrl = iconUrl;
            this.Applications = applications;
        }

        /// <summary>
        /// Идентификатор награды.
        /// </summary>
        /// <value>Идентификатор награды.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Дата создания
        /// </summary>
        /// <value>Дата создания</value>
        [DataMember(Name = "created_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Дата обновления
        /// </summary>
        /// <value>Дата обновления</value>
        [DataMember(Name = "updated_at", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// ID традиции.
        /// </summary>
        /// <value>ID традиции.</value>
        [DataMember(Name = "tradition_id", IsRequired = true, EmitDefaultValue = true)]
        public int TraditionId { get; set; }

        /// <summary>
        /// ID инструмента.
        /// </summary>
        /// <value>ID инструмента.</value>
        [DataMember(Name = "instrument_id", IsRequired = true, EmitDefaultValue = true)]
        public int InstrumentId { get; set; }

        /// <summary>
        /// Уровень традиции/инструмента ассоциированный с этой наградой.
        /// </summary>
        /// <value>Уровень традиции/инструмента ассоциированный с этой наградой.</value>
        [DataMember(Name = "award_level", IsRequired = true, EmitDefaultValue = true)]
        public int AwardLevel { get; set; }

        /// <summary>
        /// Опциональный уровень зависимой традиции/инструмента, без которого нельзя получить награду. При отсутствии зависимости, содержит &#x60;0&#x60;.
        /// </summary>
        /// <value>Опциональный уровень зависимой традиции/инструмента, без которого нельзя получить награду. При отсутствии зависимости, содержит &#x60;0&#x60;.</value>
        [DataMember(Name = "dependency_level", IsRequired = true, EmitDefaultValue = true)]
        public int DependencyLevel { get; set; }

        /// <summary>
        /// Кол-во баллов необходимое для достижения &#x60;award_level&#x60; и получения этой награды.
        /// </summary>
        /// <value>Кол-во баллов необходимое для достижения &#x60;award_level&#x60; и получения этой награды.</value>
        [DataMember(Name = "required_scores", IsRequired = true, EmitDefaultValue = true)]
        public decimal RequiredScores { get; set; }

        /// <summary>
        /// Название награды.
        /// </summary>
        /// <value>Название награды.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Описание награды.
        /// </summary>
        /// <value>Описание награды.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// URL иконки награды.
        /// </summary>
        /// <value>URL иконки награды.</value>
        [DataMember(Name = "icon_url", IsRequired = true, EmitDefaultValue = true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Приложения, в которых реализована награда. Возвращается только при указании параметра &#x60;with_applications&#x60;.
        /// </summary>
        /// <value>Приложения, в которых реализована награда. Возвращается только при указании параметра &#x60;with_applications&#x60;.</value>
        [DataMember(Name = "applications", EmitDefaultValue = false)]
        public List<Guid> Applications { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AwardsList200ResponseInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TraditionId: ").Append(TraditionId).Append("\n");
            sb.Append("  InstrumentId: ").Append(InstrumentId).Append("\n");
            sb.Append("  AwardLevel: ").Append(AwardLevel).Append("\n");
            sb.Append("  DependencyLevel: ").Append(DependencyLevel).Append("\n");
            sb.Append("  RequiredScores: ").Append(RequiredScores).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
