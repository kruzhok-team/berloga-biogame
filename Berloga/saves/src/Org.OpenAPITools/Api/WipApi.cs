/*
 * Игровые сохранения
 *
 * Игровые сохранения пишутся пользователями Таланта для игр Берлоги. Записанные в них игровые данные могут быть двух типов: JSON объект либо данные произвольной формы. Тип сохранений зависит от игры. Структура JSON объекта определяется игрой.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Запись нового сохранения
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>long</returns>
        long GamesaveCreate(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);

        /// <summary>
        /// Запись нового сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of long</returns>
        ApiResponse<long> GamesaveCreateWithHttpInfo(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);
        /// <summary>
        /// Удаление определенного сохранения
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GamesaveDelete(long saveId, int operationIndex = 0);

        /// <summary>
        /// Удаление определенного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GamesaveDeleteWithHttpInfo(long saveId, int operationIndex = 0);
        /// <summary>
        /// Чтение игровых данных указанного сохранения
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> GamesaveGamedata(long saveId, int operationIndex = 0);

        /// <summary>
        /// Чтение игровых данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> GamesaveGamedataWithHttpInfo(long saveId, int operationIndex = 0);
        /// <summary>
        /// Список игровых сохранений пользователя
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GamesaveMeta&gt;</returns>
        List<GamesaveMeta> GamesaveList(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// Список игровых сохранений пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GamesaveMeta&gt;</returns>
        ApiResponse<List<GamesaveMeta>> GamesaveListWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// Чтение мета-данных указанного сохранения
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GamesaveMeta</returns>
        GamesaveMeta GamesaveMetadata(long saveId, int operationIndex = 0);

        /// <summary>
        /// Чтение мета-данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GamesaveMeta</returns>
        ApiResponse<GamesaveMeta> GamesaveMetadataWithHttpInfo(long saveId, int operationIndex = 0);
        /// <summary>
        /// Перезапись игровых данных сохранения
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GamesaveOverwrite(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);

        /// <summary>
        /// Перезапись игровых данных сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GamesaveOverwriteWithHttpInfo(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Запись нового сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        System.Threading.Tasks.Task<long> GamesaveCreateAsync(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Запись нового сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        System.Threading.Tasks.Task<ApiResponse<long>> GamesaveCreateWithHttpInfoAsync(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Удаление определенного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GamesaveDeleteAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Удаление определенного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GamesaveDeleteWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Чтение игровых данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> GamesaveGamedataAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Чтение игровых данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> GamesaveGamedataWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Список игровых сохранений пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GamesaveMeta&gt;</returns>
        System.Threading.Tasks.Task<List<GamesaveMeta>> GamesaveListAsync(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Список игровых сохранений пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GamesaveMeta&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GamesaveMeta>>> GamesaveListWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Чтение мета-данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GamesaveMeta</returns>
        System.Threading.Tasks.Task<GamesaveMeta> GamesaveMetadataAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Чтение мета-данных указанного сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GamesaveMeta)</returns>
        System.Threading.Tasks.Task<ApiResponse<GamesaveMeta>> GamesaveMetadataWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Перезапись игровых данных сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GamesaveOverwriteAsync(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Перезапись игровых данных сохранения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GamesaveOverwriteWithHttpInfoAsync(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWipApi : IWipApiSync, IWipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WipApi : IWipApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WipApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WipApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WipApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Запись нового сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>long</returns>
        public long GamesaveCreate(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<long> localVarResponse = GamesaveCreateWithHttpInfo(saveTitle, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запись нового сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of long</returns>
        public Org.OpenAPITools.Client.ApiResponse<long> GamesaveCreateWithHttpInfo(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (saveTitle != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Save-Title", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveTitle)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WipApi.GamesaveCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<long>("/saves", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запись нового сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of long</returns>
        public async System.Threading.Tasks.Task<long> GamesaveCreateAsync(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<long> localVarResponse = await GamesaveCreateWithHttpInfoAsync(saveTitle, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запись нового сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveTitle">Опциональное имя сохранения (optional)</param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (long)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<long>> GamesaveCreateWithHttpInfoAsync(string? saveTitle = default(string?), Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (saveTitle != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Save-Title", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveTitle)); // header parameter
            }
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WipApi.GamesaveCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<long>("/saves", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Удаление определенного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GamesaveDelete(long saveId, int operationIndex = 0)
        {
            GamesaveDeleteWithHttpInfo(saveId);
        }

        /// <summary>
        /// Удаление определенного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GamesaveDeleteWithHttpInfo(long saveId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/saves/{save_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Удаление определенного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GamesaveDeleteAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GamesaveDeleteWithHttpInfoAsync(saveId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Удаление определенного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GamesaveDeleteWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/saves/{save_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение игровых данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> GamesaveGamedata(long saveId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = GamesaveGamedataWithHttpInfo(saveId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение игровых данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> GamesaveGamedataWithHttpInfo(long saveId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveGamedata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Dictionary<string, Object>>("/saves/{save_id}/gamedata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveGamedata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение игровых данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> GamesaveGamedataAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await GamesaveGamedataWithHttpInfoAsync(saveId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение игровых данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>>> GamesaveGamedataWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveGamedata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Object>>("/saves/{save_id}/gamedata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveGamedata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список игровых сохранений пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GamesaveMeta&gt;</returns>
        public List<GamesaveMeta> GamesaveList(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<GamesaveMeta>> localVarResponse = GamesaveListWithHttpInfo(limit, offset, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список игровых сохранений пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GamesaveMeta&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<GamesaveMeta>> GamesaveListWithHttpInfo(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "WipApi.GamesaveList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GamesaveMeta>>("/saves", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Список игровых сохранений пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GamesaveMeta&gt;</returns>
        public async System.Threading.Tasks.Task<List<GamesaveMeta>> GamesaveListAsync(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<GamesaveMeta>> localVarResponse = await GamesaveListWithHttpInfoAsync(limit, offset, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Список игровых сохранений пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional, default to 20)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="orderBy"> (optional, default to id_desc)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GamesaveMeta&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<GamesaveMeta>>> GamesaveListWithHttpInfoAsync(int? limit = default(int?), int? offset = default(int?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "WipApi.GamesaveList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GamesaveMeta>>("/saves", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение мета-данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GamesaveMeta</returns>
        public GamesaveMeta GamesaveMetadata(long saveId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GamesaveMeta> localVarResponse = GamesaveMetadataWithHttpInfo(saveId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение мета-данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GamesaveMeta</returns>
        public Org.OpenAPITools.Client.ApiResponse<GamesaveMeta> GamesaveMetadataWithHttpInfo(long saveId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GamesaveMeta>("/saves/{save_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Чтение мета-данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GamesaveMeta</returns>
        public async System.Threading.Tasks.Task<GamesaveMeta> GamesaveMetadataAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GamesaveMeta> localVarResponse = await GamesaveMetadataWithHttpInfoAsync(saveId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Чтение мета-данных указанного сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GamesaveMeta)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GamesaveMeta>> GamesaveMetadataWithHttpInfoAsync(long saveId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter

            localVarRequestOptions.Operation = "WipApi.GamesaveMetadata";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GamesaveMeta>("/saves/{save_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveMetadata", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Перезапись игровых данных сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GamesaveOverwrite(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            GamesaveOverwriteWithHttpInfo(saveId, requestBody);
        }

        /// <summary>
        /// Перезапись игровых данных сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GamesaveOverwriteWithHttpInfo(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WipApi.GamesaveOverwrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/saves/{save_id}/gamedata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveOverwrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Перезапись игровых данных сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GamesaveOverwriteAsync(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GamesaveOverwriteWithHttpInfoAsync(saveId, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Перезапись игровых данных сохранения 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="saveId"></param>
        /// <param name="requestBody">Данные создаваемого JSON-сохранения (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GamesaveOverwriteWithHttpInfoAsync(long saveId, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("save_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(saveId)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "WipApi.GamesaveOverwrite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (TalentOAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (Application) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Application")))
            {
                localVarRequestOptions.HeaderParameters.Add("Application", this.Configuration.GetApiKeyWithPrefix("Application"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/saves/{save_id}/gamedata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GamesaveOverwrite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
