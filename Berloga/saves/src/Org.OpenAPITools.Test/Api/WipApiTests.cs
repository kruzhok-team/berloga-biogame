/*
 * Игровые сохранения
 *
 * Игровые сохранения пишутся пользователями Таланта для игр Берлоги. Записанные в них игровые данные могут быть двух типов: JSON объект либо данные произвольной формы. Тип сохранений зависит от игры. Структура JSON объекта определяется игрой.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: talent@kruzhok.org
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing WipApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WipApiTests : IDisposable
    {
        private WipApi instance;

        public WipApiTests()
        {
            instance = new WipApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WipApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' WipApi
            //Assert.IsType<WipApi>(instance);
        }

        /// <summary>
        /// Test GamesaveCreate
        /// </summary>
        [Fact]
        public void GamesaveCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? saveTitle = null;
            //Dictionary<string, Object>? requestBody = null;
            //var response = instance.GamesaveCreate(saveTitle, requestBody);
            //Assert.IsType<long>(response);
        }

        /// <summary>
        /// Test GamesaveDelete
        /// </summary>
        [Fact]
        public void GamesaveDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long saveId = null;
            //instance.GamesaveDelete(saveId);
        }

        /// <summary>
        /// Test GamesaveGamedata
        /// </summary>
        [Fact]
        public void GamesaveGamedataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long saveId = null;
            //var response = instance.GamesaveGamedata(saveId);
            //Assert.IsType<Dictionary<string, Object>>(response);
        }

        /// <summary>
        /// Test GamesaveList
        /// </summary>
        [Fact]
        public void GamesaveListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? offset = null;
            //string? orderBy = null;
            //var response = instance.GamesaveList(limit, offset, orderBy);
            //Assert.IsType<List<GamesaveMeta>>(response);
        }

        /// <summary>
        /// Test GamesaveMetadata
        /// </summary>
        [Fact]
        public void GamesaveMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long saveId = null;
            //var response = instance.GamesaveMetadata(saveId);
            //Assert.IsType<GamesaveMeta>(response);
        }

        /// <summary>
        /// Test GamesaveOverwrite
        /// </summary>
        [Fact]
        public void GamesaveOverwriteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long saveId = null;
            //Dictionary<string, Object>? requestBody = null;
            //instance.GamesaveOverwrite(saveId, requestBody);
        }
    }
}
